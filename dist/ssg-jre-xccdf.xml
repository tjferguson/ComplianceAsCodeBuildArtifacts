<?xml version="1.0" encoding="UTF-8"?>
<Benchmark xmlns="http://checklists.nist.gov/xccdf/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="JRE" resolved="1" xml:lang="en-US" style="SCAP_1.1">
  <status date="2021-05-30">draft</status>
  <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Guide to the Secure Configuration of Java Runtime Environment</title>
  <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">This guide presents a catalog of security-relevant
configuration settings for Java Runtime Environment. It is a rendering of
content structured in the eXtensible Configuration Checklist Description Format (XCCDF)
in order to support security automation.  The SCAP content is
is available in the <html:code xmlns:html="http://www.w3.org/1999/xhtml">scap-security-guide</html:code> package which is developed at

    <html:a xmlns:html="http://www.w3.org/1999/xhtml" href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>.
<html:br xmlns:html="http://www.w3.org/1999/xhtml"/><html:br xmlns:html="http://www.w3.org/1999/xhtml"/>
Providing system administrators with such guidance informs them how to securely
configure systems under their control in a variety of network roles. Policy
makers and baseline creators can use this catalog of settings, with its
associated references to higher-level security control catalogs, in order to
assist them in security baseline creation. This guide is a <html:em xmlns:html="http://www.w3.org/1999/xhtml">catalog, not a
checklist</html:em>, and satisfaction of every item is not likely to be possible or
sensible in many operational scenarios. However, the XCCDF format enables
granular selection and adjustment of settings, and their association with OVAL
and OCIL content provides an automated checking capability. Transformations of
this document, and its associated automated checking content, are capable of
providing baselines that meet a diverse set of policy objectives. Some example
XCCDF <html:em xmlns:html="http://www.w3.org/1999/xhtml">Profiles</html:em>, which are selections of items that form checklists and
can be used as baselines, are available with this guide. They can be
processed, in an automated fashion, with tools that support the Security
Content Automation Protocol (SCAP). The DISA STIG for Java Runtime Environment,
which provides required settings for US Department of Defense systems, is
one example of a baseline created from this guidance.
</description>
  <notice xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US" id="terms_of_use">Do not attempt to implement any of the settings in
this guide without first testing them in a non-operational environment. The
creators of this guidance assume no responsibility whatsoever for its use by
other parties, and makes no guarantees, expressed or implied, about its
quality, reliability, or any other characteristic.
</notice>
  <front-matter xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The SCAP Security Guide Project<html:br xmlns:html="http://www.w3.org/1999/xhtml"/>

    <html:a xmlns:html="http://www.w3.org/1999/xhtml" href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>
</front-matter>
  <rear-matter xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Red Hat and Red Hat Enterprise Linux are either registered
trademarks or trademarks of Red Hat, Inc. in the United States and other
countries. All other names are registered trademarks or trademarks of their
respective companies.
</rear-matter>
  <platform idref="cpe:/a:sun:jre:"/>
  <platform idref="cpe:/a:ibm:jre:"/>
  <platform idref="cpe:/a:redhat:openjdk:"/>
  <version update="https://github.com/OpenSCAP/scap-security-guide/releases/latest">0.1.57</version>
  <metadata xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">SCAP Security Guide Project</dc:publisher>
    <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">SCAP Security Guide Project</dc:creator>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Frank J Cameron (CAM1244) &lt;cameron@ctc.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">0x66656c6978 &lt;0x66656c6978@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Adolph &lt;jack.adolph@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Gabe Alford &lt;redhatrises@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Firas AlShafei &lt;firas.alshafei@us.abb.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Alvares &lt;ralvares@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Anderson &lt;cba@fedoraproject.org&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">angystardust &lt;angystardust@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">anixon-rh &lt;55244503+anixon-rh@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Chuck Atkins &lt;chuck.atkins@kitware.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan Ballanger &lt;root@rballang-admin-2.fastenal.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Baranowski &lt;alex@euro-linux.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Molly Jo Bault &lt;Molly.Jo.Bault@ballardtech.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriel Becker &lt;ggasparb@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Bergmann &lt;abergmann@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Dale Bewley &lt;dale@bewley.net&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jose Luis BG &lt;bgjoseluis@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Joseph Bisch &lt;joseph.bisch@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey Blank &lt;blank@eclipse.ncsc.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Olivier Bonhomme &lt;ptitoliv@ptitoliv.net&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Lance Bragstad &lt;lbragstad@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ted Brunell &lt;tbrunell@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Blake Burkhart &lt;blake.burkhart@us.af.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Callahan &lt;pmc@patrickcallahan.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">George Campbell &lt;gcampbell@palantir.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Carboni &lt;ncarboni@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">James Cassell &lt;james.cassell@ll.mit.edu&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Frank Caviggia &lt;fcaviggi@ra.iad.redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Christensen &lt;echriste@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jayson Cofell &lt;1051437+70k10@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Caleb Cooper &lt;coopercd@ornl.gov&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Deric Crago &lt;deric.crago@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Will Cushen &lt;wcushen@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">cyarbrough76 &lt;42849651+cyarbrough76@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Maura Dailey &lt;maura@eclipse.ncsc.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Klaas Demter &lt;demter@atix.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">dhanushkar-wso2 &lt;dhanushkar@wso2.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew DiPrinzio &lt;andrew.diprinzio@jhuapl.edu&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">dom &lt;dominique.blaze@devinci.fr&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Baptiste Donnette &lt;jean-baptiste.donnette@epita.fr&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">drax &lt;applezip@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Dunne &lt;sdunne@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Fran√ßois Duthilleul &lt;francoisduthilleul@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Elin &lt;gregelin@gitmachines.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">eradot4027 &lt;jrtonmac@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alexis Facques &lt;alexis.facques@mythalesgroup.io&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Leah Fisher &lt;lfisher047@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alijohn Ghassemlouei &lt;alijohn@secureagc.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">ghylock &lt;ghylock@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Gilmore &lt;agilmore2@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Joshua Glemza &lt;jglemza@nasa.gov&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Gompper &lt;forestgomp@yahoo.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Loren Gordon &lt;lorengordon@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Patrik Greco &lt;sikevux@sikevux.se&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Grubb &lt;sgrubb@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">guangyee &lt;gyee@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Marek Haicman &lt;mhaicman@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Rebekah Hayes &lt;rhayes@corp.rivierautilities.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Henefield &lt;thenefield@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Henning Henkel &lt;henning.henkel@helvetia.ch&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">hex2a &lt;hex2a@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">John Hooks &lt;jhooks@starscream.pa.jhbcomputers.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jakub Hrozek &lt;jhrozek@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">De Huo &lt;De.Huo@windriver.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Robin Price II &lt;robin@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Yasir Imam &lt;yimam@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jiri Jaburek &lt;jjaburek@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Jackson &lt;keithkjackson@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremiah Jahn &lt;jeremiah@goodinassociates.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jakub Jelen &lt;jjelen@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jessicahfy &lt;Jessicahfy@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Stephan Joerrens &lt;Stephan.Joerrens@fiduciagad.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jono &lt;jono@ubuntu-18.localdomain&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kai Kang &lt;kai.kang@windriver.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Charles Kernstock &lt;charles.kernstock@ultra-ats.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Yuli Khodorkovskiy &lt;ykhodorkovskiy@tresys.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nathan Kinder &lt;nkinder@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Lee Kinser &lt;lee.kinser@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Evgeny Kolesnikov &lt;ekolesni@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Peter 'Pessoft' Kol√≠nek &lt;github@pessoft.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Luke Kordell &lt;luke.t.kordell@lmco.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Malte Kraus &lt;malte.kraus@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Seth Kress &lt;seth.kress@dsainc.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">kspargur &lt;kspargur@kspargur.csb&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Amit Kumar &lt;amitkuma@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Fen Labalme &lt;fen@civicactions.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ade Lee &lt;alee@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Lee &lt;Crleekwc@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Lee &lt;lee1001@llnl.gov&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jarrett Lee &lt;jarrettl@umd.edu&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Joseph Lenox &lt;lordofhyphens@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Lieskovsky &lt;jlieskov@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">≈†imon Luka≈°√≠k &lt;slukasik@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Milan Lysonek &lt;mlysonek@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Lys√©n &lt;fredrik@pipemore.se&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Caitlin Macleod &lt;caitelatte@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Maludy &lt;nmaludy@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Lokesh Mandvekar &lt;lsm5@fedoraproject.org&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Matus Marhefka &lt;mmarhefk@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jamie Lorwey Martin &lt;jlmartin@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Carlos Matos &lt;cmatos@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Robert McAllister &lt;rmcallis@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Michael McConachie &lt;michael@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Marcus Meissner &lt;meissner@suse.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Khary Mendez &lt;kmendez@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Rodney Mercer &lt;rmercer@harris.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Micene &lt;nzwulfin@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Millett &lt;bmillett@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Takuya Mishina &lt;tmishina@jp.ibm.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Mixer9 &lt;35545791+Mixer9@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">mmosel &lt;mmosel@kde.example.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Zbynek Moravec &lt;zmoravec@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kazuo Moriwaka &lt;moriwaka@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Moseley &lt;michael@eclipse.ncsc.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Renaud M√©trich &lt;rmetrich@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Nall &lt;joe@nall.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Neiloy &lt;neiloy@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Axel Nennker &lt;axel@nennker.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Michele Newman &lt;mnewman@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Sean O'Keeffe &lt;seanokeeffe797@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ilya Okomin &lt;ilya.okomin@oracle.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kaustubh Padegaonkar &lt;theTuxRacer@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Palmiotto &lt;mpalmiotto@tresys.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Max R.D. Parmer &lt;maxp@trystero.is&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Pazdziora &lt;jpazdziora@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">pcactr &lt;paul.c.arnold4.ctr@mail.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kenneth Peeples &lt;kennethwpeeples@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nathan Peters &lt;Nathaniel.Peters@ca.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Frank Lin PIAT &lt;fpiat@klabs.be&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Pietsch &lt;mail.ipv4v6+gh@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">piggyvenus &lt;piggyvenus@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Vojtech Polasek &lt;vpolasek@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Orion Poplawski &lt;orion@nwra.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Poyant &lt;npoyant@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Preisler &lt;mpreisle@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley Ceraso Prudencio &lt;wcerasop@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Raphael Sanchez Prudencio &lt;rsprudencio@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">T.O. Radzy Radzykewycz &lt;radzy@windriver.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kenyon Ralph &lt;kenyon@kenyonralph.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Ralph &lt;mralph@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Ramirez &lt;federico.r.ramirez@oracle.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">rchikov &lt;rumen.chikov@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Rick Renshaw &lt;Richard_Renshaw@xtoenergy.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Reynolds &lt;c.reynolds82@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">rhayes &lt;rhayes@rivierautilities.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Pat Riehecky &lt;riehecky@fnal.gov&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">rlucente-se-jboss &lt;rlucente@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Juan Antonio Osorio Robles &lt;jaosorior@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Rogers &lt;mrogers@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jesse Roland &lt;jesse.roland@onyxpoint.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Joshua Roys &lt;roysjosh@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">rrenshaw &lt;bofh69@yahoo.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Ruffalo &lt;chris.ruffalo@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ray Shaw (Cont ARL/CISD) rvshaw &lt;rvshaw@esme.arl.army.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Earl Sampson &lt;ESampson@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Willy Santos &lt;wsantos@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Gautam Satish &lt;gautams@hpe.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Watson Sato &lt;wsato@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Satoru SATOH &lt;satoru.satoh@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Scheel &lt;ascheel@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Bryan Schneiders &lt;pschneiders@trisept.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">shaneboulden &lt;shane.boulden@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Spencer Shimko &lt;sshimko@tresys.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Shoger &lt;mshoger@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Sj√∂gren &lt;konstruktoid@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Francisco Slavin &lt;fslavin@tresys.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">David Smith &lt;dsmith@eclipse.ncsc.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Spargur &lt;kspargur@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kenneth Stailey &lt;kstailey.lists@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Leland Steinke &lt;leland.j.steinke.ctr@mail.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Stephenson &lt;jstephen@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Stinson &lt;brian@bstinson.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jake Stookey &lt;jakestookey@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Sturges &lt;jsturges@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">teacup-on-rockingchair &lt;strandjata@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Tewksbury &lt;itewk@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Philippe Thierry &lt;phil@reseau-libre.net&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Thurston &lt;thegrit@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">tianzhenjia &lt;jiatianzhen@cmss.chinamobile.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Tinsley &lt;gtinsley@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Tittle &lt;ptittle@cmf.nrl.navy.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">tomas.hudik &lt;tomas.hudik@embedit.cz&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jeb Trayer &lt;jeb.d.trayer@uscg.mil&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Turek &lt;brian.turek@gmail.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Matƒõj T√Ωƒç &lt;matyc@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">VadimDor &lt;29509093+VadimDor@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Samuel Warren &lt;swarren@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Shawn Wells &lt;shawn@shawndwells.io&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel E. White &lt;linuxdan@users.noreply.github.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Bernhard M. Wiedemann &lt;bwiedemann@suse.de&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Roy Williams &lt;roywilli@roywilli.redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Willumpie &lt;willumpie@xs4all.nl&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Rob Wilmoth &lt;rwilmoth@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Lucas Yamanishi &lt;lucas.yamanishi@onyxpoint.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Xirui Yang &lt;xirui.yang@oracle.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">yarunachalam &lt;yarunachalam@suse.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Zimmerman &lt;kevin.zimmerman@kitware.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Jan ƒåern√Ω &lt;jcerny@redhat.com&gt;</dc:contributor>
    <dc:contributor xmlns:dc="http://purl.org/dc/elements/1.1/">Michal ≈†ruba≈ô &lt;msrubar@redhat.com&gt;</dc:contributor>
    <dc:source xmlns:dc="http://purl.org/dc/elements/1.1/">https://github.com/OpenSCAP/scap-security-guide/releases/latest</dc:source>
  </metadata>
  <model system="urn:xccdf:scoring:default"/>
  <Profile id="stig">
    <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US" override="true">Java Runtime Environment (JRE) STIG</title>
    <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US" override="true">The Java Runtime Environment (JRE) is a bundle developed
and offered by Oracle Corporation which includes the Java Virtual Machine
(JVM), class libraries, and other components necessary to run Java
applications and applets. Certain default settings within the JRE pose
a security risk so it is necessary to deploy system wide properties to
ensure a higher degree of security when utilizing the JRE.

The IBM Corporation also develops and bundles the Java Runtime Environment
(JRE) as well as Red Hat with OpenJDK.</description>
    <select idref="java_jre_accepted_sites_exists" selected="true"/>
    <select idref="java_jre_accepted_sites_properties" selected="true"/>
    <select idref="java_jre_blacklist_check" selected="true"/>
    <select idref="java_jre_blacklist_check_locked" selected="true"/>
    <select idref="java_jre_clean_previous_version" selected="true"/>
    <select idref="java_jre_deployment_config_exists" selected="true"/>
    <select idref="java_jre_deployment_config_mandatory" selected="true"/>
    <select idref="java_jre_deployment_config_properties" selected="true"/>
    <select idref="java_jre_deployment_properties_exists" selected="true"/>
    <select idref="java_jre_disable_untrusted_sources" selected="true"/>
    <select idref="java_jre_disable_untrusted_sources_locked" selected="true"/>
    <select idref="java_jre_enable_jws" selected="true"/>
    <select idref="java_jre_enable_jws_locked" selected="true"/>
    <select idref="java_jre_insecure_prompt" selected="true"/>
    <select idref="java_jre_insecure_prompt_locked" selected="true"/>
    <select idref="java_jre_lock_untrusted_sources" selected="true"/>
    <select idref="java_jre_lock_untrusted_sources_locked" selected="true"/>
    <select idref="java_jre_security_revocation_check" selected="true"/>
    <select idref="java_jre_security_revocation_check_locked" selected="true"/>
    <select idref="java_jre_unsigned_applications" selected="true"/>
    <select idref="java_jre_unsigned_applications_locked" selected="true"/>
    <select idref="java_jre_updated" selected="true"/>
    <select idref="java_jre_validation_crl" selected="true"/>
    <select idref="java_jre_validation_crl_locked" selected="true"/>
    <select idref="java_jre_validation_ocsp" selected="true"/>
    <select idref="java_jre_validation_ocsp_locked" selected="true"/>
    <select idref="remediation_functions" selected="false"/>
  </Profile>
  <Group id="remediation_functions">
    <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation functions used by the SCAP Security Guide Project</title>
    <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">XCCDF form of the various remediation functions as used by remediation scripts from the SCAP Security Guide Project.</description>
    <Value id="function_create_audit_remediation_unsuccessful_file_modification_detailed" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function create_audit_remediation_unsuccessful_file_modification_detailed</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value>function create_audit_remediation_unsuccessful_file_modification_detailed {
	mkdir -p "$(dirname "$1")"
	# The - option to mark a here document limit string (&lt;&lt;-EOF) suppresses leading tabs (but not spaces) in the output.
	cat &lt;&lt;-EOF &gt; "$1"
		## This content is a section of an Audit config snapshot recommended for linux systems that target OSPP compliance.
		## The following content has been retreived on 2019-03-11 from: https://github.com/linux-audit/audit-userspace/blob/master/rules/30-ospp-v42.rules

		## The purpose of these rules is to meet the requirements for Operating
		## System Protection Profile (OSPP)v4.2. These rules depends on having
		## 10-base-config.rules, 11-loginuid.rules, and 43-module-load.rules installed.

		## Unsuccessful file creation (open with O_CREAT)
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S open -F a1&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S open -F a1&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S open -F a1&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S open -F a1&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create

		## Unsuccessful file modifications (open for write or truncate)
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S open -F a1&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S open -F a1&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S open -F a1&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S open -F a1&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification

		## Unsuccessful file access (any other opens) This has to go last.
		-a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
		-a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
		-a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
		-a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
	EOF
}</value>
    </Value>
    <Value id="function_die" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function die</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value># Print a message to stderr and exit the shell
# $1: The message to print.
# $2: The error code (optional, default is 1)
function die {
	local _message="$1" _rc="${2:-1}"
	printf '%s\n' "$_message" &gt;&amp;2
	exit "$_rc"
}</value>
    </Value>
    <Value id="function_ensure_pam_module_options" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function ensure_pam_module_options</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value>function ensure_pam_module_options {
	if [ $# -lt 7 ] || [ $# -gt 8 ] ; then
                echo "$0 requires seven or eight arguments" &gt;&amp;2
                exit 1
        fi
	local _pamFile="$1" _type="$2" _control="$3" _module="$4" _option="$5" _valueRegex="$6" _defaultValue="$7"
	local _remove_argument=""
	if [ $# -eq 8 ] ; then
        	_remove_argument="$8"
		# convert it to lowercase
		_remove_argument=${_remove_argument,,}
	fi

	# make sure that we have a line like this in ${_pamFile} (additional options are left as-is):
	# ${_type} ${_control} ${_module} ${_option}=${_valueRegex}

	if ! [ -e "$_pamFile" ] ; then
		echo "$_pamFile doesn't exist" &gt;&amp;2
		exit 1
	fi

	# if remove argument only
	if [ "${_remove_argument}" = "yes" -o "${_remove_argument}" = "true" ] ; then
		sed --follow-symlinks -i -E -e "s/^(\\s*${_type}\\s+\\S+\\s+${_module}(\\s.+)?)\\s${_option}(=\\S+)?/\\1/" "${_pamFile}"
		exit 0
	fi

	# non-empty values need to be preceded by an equals sign
	[ -n "${_valueRegex}" ] &amp;&amp; _valueRegex="=${_valueRegex}"
	# add an equals sign to non-empty values
	[ -n "${_defaultValue}" ] &amp;&amp; _defaultValue="=${_defaultValue}"

	# fix 'type' if it's wrong
	if grep -q -P "^\\s*(?"'!'"${_type}\\s)[[:alnum:]]+\\s+[[:alnum:]]+\\s+${_module}" &lt; "${_pamFile}" ; then
		sed --follow-symlinks -i -E -e "s/^(\\s*)[[:alnum:]]+(\\s+[[:alnum:]]+\\s+${_module})/\\1${_type}\\2/" "${_pamFile}"
	fi

	# fix 'control' if it's wrong
	if grep -q -P "^\\s*${_type}\\s+(?"'!'"${_control})[[:alnum:]]+\\s+${_module}" &lt; "${_pamFile}" ; then
		sed --follow-symlinks -i -E -e "s/^(\\s*${_type}\\s+)[[:alnum:]]+(\\s+${_module})/\\1${_control}\\2/" "${_pamFile}"
	fi

	# fix the value for 'option' if one exists but does not match '_valueRegex'
    if grep -q -P "^\\s*${_type}\\s+${_control}\\s+${_module}(\\s.+)?\\s+${_option}(?"'!'"${_valueRegex}(\\s|\$))" &lt; "${_pamFile}" ; then
		sed --follow-symlinks -i -E -e "s/^(\\s*${_type}\\s+${_control}\\s+${_module}(\\s.+)?\\s)${_option}=[^[:space:]]+/\\1${_option}${_defaultValue}/" "${_pamFile}"

    # add 'option=default' if option is not set
	elif grep -q -E "^\\s*${_type}\\s+${_control}\\s+${_module}" &lt; "${_pamFile}" &amp;&amp;
         grep    -E "^\\s*${_type}\\s+${_control}\\s+${_module}" &lt; "${_pamFile}" | grep -q -E -v "\\s${_option}(=|\\s|\$)" ; then

		sed --follow-symlinks -i -E -e "s/^(\\s*${_type}\\s+${_control}\\s+${_module}[^\\n]*)/\\1 ${_option}${_defaultValue}/" "${_pamFile}"
	# add a new entry if none exists
	elif ! grep -q -P "^\\s*${_type}\\s+${_control}\\s+${_module}(\\s.+)?\\s+${_option}${_valueRegex}(\\s|\$)" &lt; "${_pamFile}" ; then
		echo "${_type} ${_control} ${_module} ${_option}${_defaultValue}" &gt;&gt; "${_pamFile}"
	fi
}</value>
    </Value>
    <Value id="function_fix_audit_syscall_rule" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function fix_audit_syscall_rule</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value># Function to fix syscall audit rule for given system call. It is
# based on example audit syscall rule definitions as outlined in
# /usr/share/doc/audit-2.3.7/stig.rules file provided with the audit
# package. It will combine multiple system calls belonging to the same
# syscall group into one audit rule (rather than to create audit rule per
# different system call) to avoid audit infrastructure performance penalty
# in the case of 'one-audit-rule-definition-per-one-system-call'. See:
#
#   https://www.redhat.com/archives/linux-audit/2014-November/msg00009.html
#
# for further details.
#
# Expects five arguments (each of them is required) in the form of:
# * audit tool				tool used to load audit rules,
# 					either 'auditctl', or 'augenrules
# * audit rules' pattern		audit rule skeleton for same syscall
# * syscall group			greatest common string this rule shares
# 					with other rules from the same group
# * architecture			architecture this rule is intended for
# * full form of new rule to add	expected full form of audit rule as to be
# 					added into audit.rules file
#
# Note: The 2-th up to 4-th arguments are used to determine how many existing
# audit rules will be inspected for resemblance with the new audit rule
# (5-th argument) the function is going to add. The rule's similarity check
# is performed to optimize audit.rules definition (merge syscalls of the same
# group into one rule) to avoid the "single-syscall-per-audit-rule" performance
# penalty.
#
# Example call:
#
#	See e.g. 'audit_rules_file_deletion_events.sh' remediation script
#
function fix_audit_syscall_rule {

# Load function arguments into local variables
local tool="$1"
local pattern="$2"
local group="$3"
local arch="$4"
local full_rule="$5"

# Check sanity of the input
if [ $# -ne "5" ]
then
	echo "Usage: fix_audit_syscall_rule 'tool' 'pattern' 'group' 'arch' 'full rule'"
	echo "Aborting."
	exit 1
fi

# Create a list of audit *.rules files that should be inspected for presence and correctness
# of a particular audit rule. The scheme is as follows:
# 
# -----------------------------------------------------------------------------------------
#  Tool used to load audit rules | Rule already defined  |  Audit rules file to inspect    |
# -----------------------------------------------------------------------------------------
#        auditctl                |     Doesn't matter    |  /etc/audit/audit.rules         |
# -----------------------------------------------------------------------------------------
#        augenrules              |          Yes          |  /etc/audit/rules.d/*.rules     |
#        augenrules              |          No           |  /etc/audit/rules.d/$key.rules  |
# -----------------------------------------------------------------------------------------
#
declare -a files_to_inspect

retval=0

# First check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	return 1
# If audit tool is 'auditctl', then add '/etc/audit/audit.rules'
# file to the list of files to be inspected
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect+=('/etc/audit/audit.rules' )
# If audit tool is 'augenrules', then check if the audit rule is defined
# If rule is defined, add '/etc/audit/rules.d/*.rules' to the list for inspection
# If rule isn't defined yet, add '/etc/audit/rules.d/$key.rules' to the list for inspection
elif [ "$tool" == 'augenrules' ]
then
	# Extract audit $key from audit rule so we can use it later
	matches=()
	key=$(expr "$full_rule" : '.*-k[[:space:]]\([^[:space:]]\+\)' '|' "$full_rule" : '.*-F[[:space:]]key=\([^[:space:]]\+\)')
	readarray -t matches &lt; &lt;(sed -s -n -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d;F" /etc/audit/rules.d/*.rules)
	if [ $? -ne 0 ]
	then
		retval=1
	fi
	for match in "${matches[@]}"
	do
		files_to_inspect+=("${match}")
	done
	# Case when particular rule isn't defined in /etc/audit/rules.d/*.rules yet
	if [ ${#files_to_inspect[@]} -eq "0" ]
	then
		file_to_inspect="/etc/audit/rules.d/$key.rules"
		files_to_inspect=("$file_to_inspect")
		if [ ! -e "$file_to_inspect" ]
		then
			touch "$file_to_inspect"
			chmod 0640 "$file_to_inspect"
		fi
	fi
fi

#
# Indicator that we want to append $full_rule into $audit_file by default
local append_expected_rule=0

for audit_file in "${files_to_inspect[@]}"
do
	# Filter existing $audit_file rules' definitions to select those that:
	# * follow the rule pattern, and
	# * meet the hardware architecture requirement, and
	# * are current syscall group specific
	readarray -t existing_rules &lt; &lt;(sed -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d"  "$audit_file")
	if [ $? -ne 0 ]
	then
		retval=1
	fi

	# Process rules found case-by-case
	for rule in "${existing_rules[@]}"
	do
		# Found rule is for same arch &amp; key, but differs (e.g. in count of -S arguments)
		if [ "${rule}" != "${full_rule}" ]
		then
			# If so, isolate just '(-S \w)+' substring of that rule
			rule_syscalls=$(echo "$rule" | grep -o -P '(-S \w+ )+')
			# Check if list of '-S syscall' arguments of that rule is subset
			# of '-S syscall' list of expected $full_rule
			if grep -q -- "$rule_syscalls" &lt;&lt;&lt; "$full_rule"
			then
				# Rule is covered (i.e. the list of -S syscalls for this rule is
				# subset of -S syscalls of $full_rule =&gt; existing rule can be deleted
				# Thus delete the rule from audit.rules &amp; our array
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi
				existing_rules=("${existing_rules[@]//$rule/}")
			else
				# Rule isn't covered by $full_rule - it besides -S syscall arguments
				# for this group contains also -S syscall arguments for other syscall
				# group. Example: '-S lchown -S fchmod -S fchownat' =&gt; group='chown'
				# since 'lchown' &amp; 'fchownat' share 'chown' substring
				# Therefore:
				# * 1) delete the original rule from audit.rules
				# (original '-S lchown -S fchmod -S fchownat' rule would be deleted)
				# * 2) delete the -S syscall arguments for this syscall group, but
				# keep those not belonging to this syscall group
				# (original '-S lchown -S fchmod -S fchownat' would become '-S fchmod'
				# * 3) append the modified (filtered) rule again into audit.rules
				# if the same rule not already present
				#
				# 1) Delete the original rule
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi

				# 2) Delete syscalls for this group, but keep those from other groups
				# Convert current rule syscall's string into array splitting by '-S' delimiter
				IFS_BKP="$IFS"
				IFS=$'-S'
				read -a rule_syscalls_as_array &lt;&lt;&lt; "$rule_syscalls"
				# Reset IFS back to default
				IFS="$IFS_BKP"
				# Splitting by "-S" can't be replaced by the readarray functionality easily

				# Declare new empty string to hold '-S syscall' arguments from other groups
				new_syscalls_for_rule=''
				# Walk through existing '-S syscall' arguments
				for syscall_arg in "${rule_syscalls_as_array[@]}"
				do
					# Skip empty $syscall_arg values
					if [ "$syscall_arg" == '' ]
					then
						continue
					fi
					# If the '-S syscall' doesn't belong to current group add it to the new list
					# (together with adding '-S' delimiter back for each of such item found)
					if grep -q -v -- "$group" &lt;&lt;&lt; "$syscall_arg"
					then
						new_syscalls_for_rule="$new_syscalls_for_rule -S $syscall_arg"
					fi
				done
				# Replace original '-S syscall' list with the new one for this rule
				updated_rule=${rule//$rule_syscalls/$new_syscalls_for_rule}
				# Squeeze repeated whitespace characters in rule definition (if any) into one
				updated_rule=$(echo "$updated_rule" | tr -s '[:space:]')
				# 3) Append the modified / filtered rule again into audit.rules
				#    (but only in case it's not present yet to prevent duplicate definitions)
				if ! grep -q -- "$updated_rule" "$audit_file"
				then
					echo "$updated_rule" &gt;&gt; "$audit_file"
				fi
			fi
		else
			# $audit_file already contains the expected rule form for this
			# architecture &amp; key =&gt; don't insert it second time
			append_expected_rule=1
		fi
	done

	# We deleted all rules that were subset of the expected one for this arch &amp; key.
	# Also isolated rules containing system calls not from this system calls group.
	# Now append the expected rule if it's not present in $audit_file yet
	if [[ ${append_expected_rule} -eq "0" ]]
	then
		echo "$full_rule" &gt;&gt; "$audit_file"
	fi
done

return $retval

}</value>
    </Value>
    <Value id="function_fix_audit_watch_rule" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function fix_audit_watch_rule</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value># Function to fix audit file system object watch rule for given path:
# * if rule exists, also verifies the -w bits match the requirements
# * if rule doesn't exist yet, appends expected rule form to $files_to_inspect
#   audit rules file, depending on the tool which was used to load audit rules
#
# Expects four arguments (each of them is required) in the form of:
# * audit tool				tool used to load audit rules,
# 					either 'auditctl', or 'augenrules'
# * path                        	value of -w audit rule's argument
# * required access bits        	value of -p audit rule's argument
# * key                         	value of -k audit rule's argument
#
# Example call:
#
#       fix_audit_watch_rule "auditctl" "/etc/localtime" "wa" "audit_time_rules"
#
function fix_audit_watch_rule {

# Load function arguments into local variables
local tool="$1"
local path="$2"
local required_access_bits="$3"
local key="$4"

# Check sanity of the input
if [ $# -ne "4" ]
then
	echo "Usage: fix_audit_watch_rule 'tool' 'path' 'bits' 'key'"
	echo "Aborting."
	exit 1
fi

# Create a list of audit *.rules files that should be inspected for presence and correctness
# of a particular audit rule. The scheme is as follows:
#
# -----------------------------------------------------------------------------------------
# Tool used to load audit rules	| Rule already defined	|  Audit rules file to inspect	  |
# -----------------------------------------------------------------------------------------
#	auditctl		|     Doesn't matter	|  /etc/audit/audit.rules	  |
# -----------------------------------------------------------------------------------------
# 	augenrules		|          Yes		|  /etc/audit/rules.d/*.rules	  |
# 	augenrules		|          No		|  /etc/audit/rules.d/$key.rules  |
# -----------------------------------------------------------------------------------------
declare -a files_to_inspect
files_to_inspect=()

# Check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	exit 1
# If the audit tool is 'auditctl', then add '/etc/audit/audit.rules'
# into the list of files to be inspected
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect+=('/etc/audit/audit.rules')
# If the audit is 'augenrules', then check if rule is already defined
# If rule is defined, add '/etc/audit/rules.d/*.rules' to list of files for inspection.
# If rule isn't defined, add '/etc/audit/rules.d/$key.rules' to list of files for inspection.
elif [ "$tool" == 'augenrules' ]
then
	readarray -t matches &lt; &lt;(grep -P "[\s]*-w[\s]+$path" /etc/audit/rules.d/*.rules)

	# For each of the matched entries
	for match in "${matches[@]}"
	do
		# Extract filepath from the match
		rulesd_audit_file=$(echo $match | cut -f1 -d ':')
		# Append that path into list of files for inspection
		files_to_inspect+=("$rulesd_audit_file")
	done
	# Case when particular audit rule isn't defined yet
	if [ "${#files_to_inspect[@]}" -eq "0" ]
	then
		# Append '/etc/audit/rules.d/$key.rules' into list of files for inspection
		local key_rule_file="/etc/audit/rules.d/$key.rules"
		# If the $key.rules file doesn't exist yet, create it with correct permissions
		if [ ! -e "$key_rule_file" ]
		then
			touch "$key_rule_file"
			chmod 0640 "$key_rule_file"
		fi

		files_to_inspect+=("$key_rule_file")
	fi
fi

# Finally perform the inspection and possible subsequent audit rule
# correction for each of the files previously identified for inspection
for audit_rules_file in "${files_to_inspect[@]}"
do

	# Check if audit watch file system object rule for given path already present
	if grep -q -P -- "[\s]*-w[\s]+$path" "$audit_rules_file"
	then
		# Rule is found =&gt; verify yet if existing rule definition contains
		# all of the required access type bits

		# Escape slashes in path for use in sed pattern below
		local esc_path=${path//$'/'/$'\/'}
		# Define BRE whitespace class shortcut
		local sp="[[:space:]]"
		# Extract current permission access types (e.g. -p [r|w|x|a] values) from audit rule
		current_access_bits=$(sed -ne "s/$sp*-w$sp\+$esc_path$sp\+-p$sp\+\([rxwa]\{1,4\}\).*/\1/p" "$audit_rules_file")
		# Split required access bits string into characters array
		# (to check bit's presence for one bit at a time)
		for access_bit in $(echo "$required_access_bits" | grep -o .)
		do
			# For each from the required access bits (e.g. 'w', 'a') check
			# if they are already present in current access bits for rule.
			# If not, append that bit at the end
			if ! grep -q "$access_bit" &lt;&lt;&lt; "$current_access_bits"
			then
				# Concatenate the existing mask with the missing bit
				current_access_bits="$current_access_bits$access_bit"
			fi
		done
		# Propagate the updated rule's access bits (original + the required
		# ones) back into the /etc/audit/audit.rules file for that rule
		sed -i "s/\($sp*-w$sp\+$esc_path$sp\+-p$sp\+\)\([rxwa]\{1,4\}\)\(.*\)/\1$current_access_bits\3/" "$audit_rules_file"
	else
		# Rule isn't present yet. Append it at the end of $audit_rules_file file
		# with proper key

		echo "-w $path -p $required_access_bits -k $key" &gt;&gt; "$audit_rules_file"
	fi
done
}</value>
    </Value>
    <Value id="function_include_merge_files_by_lines" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function include_merge_files_by_lines</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value>function include_merge_files_by_lines {
	:
}

# 1: Filename of the "master" file
# 2: Filename of the newly created file
function create_empty_file_like {
	local lines_count
	lines_count=$(cat "$1" | wc -l)
	for _ in $(seq 1 "$lines_count"); do
		printf '\n' &gt;&gt; "$2"
	done
}


# 1: Filename of the "master" file
# 2: Filename of sample flie
function second_file_is_same_except_newlines {
	local lines_of_master lines_of_sample len_of_master line_number i
	readarray -t lines_of_master &lt; "$1"
	readarray -t lines_of_sample &lt; "$2"

	len_of_master="${#lines_of_master[@]}"
	if test "$len_of_master" != "${#lines_of_sample[@]}"; then
		echo "Files '$1' and '$2' have different number of lines, $len_of_master and ${#lines_of_sample[@]} respectively."
		return 1
	fi

	for line_number in $(seq 1 "$len_of_master"); do
		i=$((line_number - 1))
		test -n "${lines_of_sample[$i]}" || continue
		if test "${lines_of_master[$i]}" != "${lines_of_sample[$i]}"; then
			echo "Line $line_number is different in files '$1' and '$2'."
			return 1
		fi
	done
}


# 1: Filename of the "master" file
# 2: Filename of sample flie
# 3: List of indices (1-based, space-separated string)
function merge_first_lines_to_second_on_indices {
	local lines_of_master lines_of_sample line_number i
	test -f "$2" || create_empty_file_like "$1" "$2"

	readarray -t lines_of_master &lt; "$1"
	readarray -t lines_of_sample &lt; "$2"

	error_msg="$(second_file_is_same_except_newlines "$1" "$2")"
	if test $? != 0; then
		echo "Error merging lines into '$2': $error_msg" &gt;&amp;2
		return 1
	fi

	for line_number in $3; do
		i=$((line_number - 1))
		lines_of_sample[$i]="${lines_of_master[$i]}"
	done

	printf "%s\n" "${lines_of_sample[@]}" &gt; "$2"
}</value>
    </Value>
    <Value id="function_include_mount_options_functions" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function include_mount_options_functions</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value>function include_mount_options_functions {
	:
}

# $1: type of filesystem
# $2: new mount point option
# $3: filesystem of new mount point (used when adding new entry in fstab)
# $4: mount type of new mount point (used when adding new entry in fstab)
function ensure_mount_option_for_vfstype {
        local _vfstype="$1" _new_opt="$2" _filesystem=$3 _type=$4 _vfstype_points=()
        readarray -t _vfstype_points &lt; &lt;(grep -E "[[:space:]]${_vfstype}[[:space:]]" /etc/fstab | awk '{print $2}')

        for _vfstype_point in "${_vfstype_points[@]}"
        do
                ensure_mount_option_in_fstab "$_vfstype_point" "$_new_opt" "$_filesystem" "$_type"
        done
}

# $1: mount point
# $2: new mount point option
# $3: device or virtual string (used when adding new entry in fstab)
# $4: mount type of mount point (used when adding new entry in fstab)
function ensure_mount_option_in_fstab {
	local _mount_point="$1" _new_opt="$2" _device=$3 _type=$4
	local _mount_point_match_regexp="" _previous_mount_opts=""
	_mount_point_match_regexp="$(get_mount_point_regexp "$_mount_point")"

	if [ "$(grep -c "$_mount_point_match_regexp" /etc/fstab)" -eq 0 ]; then
		# runtime opts without some automatic kernel/userspace-added defaults
		_previous_mount_opts=$(grep "$_mount_point_match_regexp" /etc/mtab | head -1 |  awk '{print $4}' \
					| sed -E "s/(rw|defaults|seclabel|${_new_opt})(,|$)//g;s/,$//")
		[ "$_previous_mount_opts" ] &amp;&amp; _previous_mount_opts+=","
		echo "${_device} ${_mount_point} ${_type} defaults,${_previous_mount_opts}${_new_opt} 0 0" &gt;&gt; /etc/fstab
	elif [ "$(grep "$_mount_point_match_regexp" /etc/fstab | grep -c "$_new_opt")" -eq 0 ]; then
		_previous_mount_opts=$(grep "$_mount_point_match_regexp" /etc/fstab | awk '{print $4}')
		sed -i "s|\(${_mount_point_match_regexp}.*${_previous_mount_opts}\)|\1,${_new_opt}|" /etc/fstab
	fi
}

# $1: mount point
function get_mount_point_regexp {
		printf "[[:space:]]%s[[:space:]]" "$1"
}

# $1: mount point
function assert_mount_point_in_fstab {
	local _mount_point_match_regexp
	_mount_point_match_regexp="$(get_mount_point_regexp "$1")"
	grep "$_mount_point_match_regexp" -q /etc/fstab \
		|| { echo "The mount point '$1' is not even in /etc/fstab, so we can't set up mount options" &gt;&amp;2; return 1; }
}

# $1: mount point
function remove_defaults_from_fstab_if_overriden {
	local _mount_point_match_regexp
	_mount_point_match_regexp="$(get_mount_point_regexp "$1")"
	if grep "$_mount_point_match_regexp" /etc/fstab | grep -q "defaults,"
	then
		sed -i "s|\(${_mount_point_match_regexp}.*\)defaults,|\1|" /etc/fstab
	fi
}

# $1: mount point
function ensure_partition_is_mounted {
	local _mount_point="$1"
	mkdir -p "$_mount_point" || return 1
	if mountpoint -q "$_mount_point"; then
		mount -o remount --target "$_mount_point"
	else
		mount --target "$_mount_point"
	fi
}</value>
    </Value>
    <Value id="function_perform_audit_adjtimex_settimeofday_stime_remediation" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function perform_audit_adjtimex_settimeofday_stime_remediation</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value># Function to fix syscall audit rule for given system call. It is
# based on example audit syscall rule definitions as outlined in
# /usr/share/doc/audit-2.3.7/stig.rules file provided with the audit
# package. It will combine multiple system calls belonging to the same
# syscall group into one audit rule (rather than to create audit rule per
# different system call) to avoid audit infrastructure performance penalty
# in the case of 'one-audit-rule-definition-per-one-system-call'. See:
#
#   https://www.redhat.com/archives/linux-audit/2014-November/msg00009.html
#
# for further details.
#
# Expects five arguments (each of them is required) in the form of:
# * audit tool				tool used to load audit rules,
# 					either 'auditctl', or 'augenrules
# * audit rules' pattern		audit rule skeleton for same syscall
# * syscall group			greatest common string this rule shares
# 					with other rules from the same group
# * architecture			architecture this rule is intended for
# * full form of new rule to add	expected full form of audit rule as to be
# 					added into audit.rules file
#
# Note: The 2-th up to 4-th arguments are used to determine how many existing
# audit rules will be inspected for resemblance with the new audit rule
# (5-th argument) the function is going to add. The rule's similarity check
# is performed to optimize audit.rules definition (merge syscalls of the same
# group into one rule) to avoid the "single-syscall-per-audit-rule" performance
# penalty.
#
# Example call:
#
#	See e.g. 'audit_rules_file_deletion_events.sh' remediation script
#
function fix_audit_syscall_rule {

# Load function arguments into local variables
local tool="$1"
local pattern="$2"
local group="$3"
local arch="$4"
local full_rule="$5"

# Check sanity of the input
if [ $# -ne "5" ]
then
	echo "Usage: fix_audit_syscall_rule 'tool' 'pattern' 'group' 'arch' 'full rule'"
	echo "Aborting."
	exit 1
fi

# Create a list of audit *.rules files that should be inspected for presence and correctness
# of a particular audit rule. The scheme is as follows:
# 
# -----------------------------------------------------------------------------------------
#  Tool used to load audit rules | Rule already defined  |  Audit rules file to inspect    |
# -----------------------------------------------------------------------------------------
#        auditctl                |     Doesn't matter    |  /etc/audit/audit.rules         |
# -----------------------------------------------------------------------------------------
#        augenrules              |          Yes          |  /etc/audit/rules.d/*.rules     |
#        augenrules              |          No           |  /etc/audit/rules.d/$key.rules  |
# -----------------------------------------------------------------------------------------
#
declare -a files_to_inspect

retval=0

# First check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	return 1
# If audit tool is 'auditctl', then add '/etc/audit/audit.rules'
# file to the list of files to be inspected
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect+=('/etc/audit/audit.rules' )
# If audit tool is 'augenrules', then check if the audit rule is defined
# If rule is defined, add '/etc/audit/rules.d/*.rules' to the list for inspection
# If rule isn't defined yet, add '/etc/audit/rules.d/$key.rules' to the list for inspection
elif [ "$tool" == 'augenrules' ]
then
	# Extract audit $key from audit rule so we can use it later
	matches=()
	key=$(expr "$full_rule" : '.*-k[[:space:]]\([^[:space:]]\+\)' '|' "$full_rule" : '.*-F[[:space:]]key=\([^[:space:]]\+\)')
	readarray -t matches &lt; &lt;(sed -s -n -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d;F" /etc/audit/rules.d/*.rules)
	if [ $? -ne 0 ]
	then
		retval=1
	fi
	for match in "${matches[@]}"
	do
		files_to_inspect+=("${match}")
	done
	# Case when particular rule isn't defined in /etc/audit/rules.d/*.rules yet
	if [ ${#files_to_inspect[@]} -eq "0" ]
	then
		file_to_inspect="/etc/audit/rules.d/$key.rules"
		files_to_inspect=("$file_to_inspect")
		if [ ! -e "$file_to_inspect" ]
		then
			touch "$file_to_inspect"
			chmod 0640 "$file_to_inspect"
		fi
	fi
fi

#
# Indicator that we want to append $full_rule into $audit_file by default
local append_expected_rule=0

for audit_file in "${files_to_inspect[@]}"
do
	# Filter existing $audit_file rules' definitions to select those that:
	# * follow the rule pattern, and
	# * meet the hardware architecture requirement, and
	# * are current syscall group specific
	readarray -t existing_rules &lt; &lt;(sed -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d"  "$audit_file")
	if [ $? -ne 0 ]
	then
		retval=1
	fi

	# Process rules found case-by-case
	for rule in "${existing_rules[@]}"
	do
		# Found rule is for same arch &amp; key, but differs (e.g. in count of -S arguments)
		if [ "${rule}" != "${full_rule}" ]
		then
			# If so, isolate just '(-S \w)+' substring of that rule
			rule_syscalls=$(echo "$rule" | grep -o -P '(-S \w+ )+')
			# Check if list of '-S syscall' arguments of that rule is subset
			# of '-S syscall' list of expected $full_rule
			if grep -q -- "$rule_syscalls" &lt;&lt;&lt; "$full_rule"
			then
				# Rule is covered (i.e. the list of -S syscalls for this rule is
				# subset of -S syscalls of $full_rule =&gt; existing rule can be deleted
				# Thus delete the rule from audit.rules &amp; our array
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi
				existing_rules=("${existing_rules[@]//$rule/}")
			else
				# Rule isn't covered by $full_rule - it besides -S syscall arguments
				# for this group contains also -S syscall arguments for other syscall
				# group. Example: '-S lchown -S fchmod -S fchownat' =&gt; group='chown'
				# since 'lchown' &amp; 'fchownat' share 'chown' substring
				# Therefore:
				# * 1) delete the original rule from audit.rules
				# (original '-S lchown -S fchmod -S fchownat' rule would be deleted)
				# * 2) delete the -S syscall arguments for this syscall group, but
				# keep those not belonging to this syscall group
				# (original '-S lchown -S fchmod -S fchownat' would become '-S fchmod'
				# * 3) append the modified (filtered) rule again into audit.rules
				# if the same rule not already present
				#
				# 1) Delete the original rule
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi

				# 2) Delete syscalls for this group, but keep those from other groups
				# Convert current rule syscall's string into array splitting by '-S' delimiter
				IFS_BKP="$IFS"
				IFS=$'-S'
				read -a rule_syscalls_as_array &lt;&lt;&lt; "$rule_syscalls"
				# Reset IFS back to default
				IFS="$IFS_BKP"
				# Splitting by "-S" can't be replaced by the readarray functionality easily

				# Declare new empty string to hold '-S syscall' arguments from other groups
				new_syscalls_for_rule=''
				# Walk through existing '-S syscall' arguments
				for syscall_arg in "${rule_syscalls_as_array[@]}"
				do
					# Skip empty $syscall_arg values
					if [ "$syscall_arg" == '' ]
					then
						continue
					fi
					# If the '-S syscall' doesn't belong to current group add it to the new list
					# (together with adding '-S' delimiter back for each of such item found)
					if grep -q -v -- "$group" &lt;&lt;&lt; "$syscall_arg"
					then
						new_syscalls_for_rule="$new_syscalls_for_rule -S $syscall_arg"
					fi
				done
				# Replace original '-S syscall' list with the new one for this rule
				updated_rule=${rule//$rule_syscalls/$new_syscalls_for_rule}
				# Squeeze repeated whitespace characters in rule definition (if any) into one
				updated_rule=$(echo "$updated_rule" | tr -s '[:space:]')
				# 3) Append the modified / filtered rule again into audit.rules
				#    (but only in case it's not present yet to prevent duplicate definitions)
				if ! grep -q -- "$updated_rule" "$audit_file"
				then
					echo "$updated_rule" &gt;&gt; "$audit_file"
				fi
			fi
		else
			# $audit_file already contains the expected rule form for this
			# architecture &amp; key =&gt; don't insert it second time
			append_expected_rule=1
		fi
	done

	# We deleted all rules that were subset of the expected one for this arch &amp; key.
	# Also isolated rules containing system calls not from this system calls group.
	# Now append the expected rule if it's not present in $audit_file yet
	if [[ ${append_expected_rule} -eq "0" ]]
	then
		echo "$full_rule" &gt;&gt; "$audit_file"
	fi
done

return $retval

}


# Function to perform remediation for the 'adjtimex', 'settimeofday', and 'stime' audit
# system calls on RHEL, Fedora or OL systems.
# Remediation performed for both possible tools: 'auditctl' and 'augenrules'.
#
# Note: 'stime' system call isn't known at 64-bit arch (see "$ ausyscall x86_64 stime" 's output)
# therefore excluded from the list of time group system calls to be audited on this arch
#
# Example Call:
#
#      perform_audit_adjtimex_settimeofday_stime_remediation
#
function perform_audit_adjtimex_settimeofday_stime_remediation {

# Retrieve hardware architecture of the underlying system
[ "$(getconf LONG_BIT)" = "32" ] &amp;&amp; RULE_ARCHS=("b32") || RULE_ARCHS=("b32" "b64")

for ARCH in "${RULE_ARCHS[@]}"
do

	PATTERN="-a always,exit -F arch=${ARCH} -S .* -k *"
	# Create expected audit group and audit rule form for particular system call &amp; architecture
	if [ ${ARCH} = "b32" ]
	then
		# stime system call is known at 32-bit arch (see e.g "$ ausyscall i386 stime" 's output)
		# so append it to the list of time group system calls to be audited
		GROUP="\(adjtimex\|settimeofday\|stime\)"
		FULL_RULE="-a always,exit -F arch=${ARCH} -S adjtimex -S settimeofday -S stime -k audit_time_rules"
	elif [ ${ARCH} = "b64" ]
	then
		# stime system call isn't known at 64-bit arch (see "$ ausyscall x86_64 stime" 's output)
		# therefore don't add it to the list of time group system calls to be audited
		GROUP="\(adjtimex\|settimeofday\)"
		FULL_RULE="-a always,exit -F arch=${ARCH} -S adjtimex -S settimeofday -k audit_time_rules"
	fi
	# Perform the remediation for both possible tools: 'auditctl' and 'augenrules'
	fix_audit_syscall_rule "auditctl" "$PATTERN" "$GROUP" "$ARCH" "$FULL_RULE"
	fix_audit_syscall_rule "augenrules" "$PATTERN" "$GROUP" "$ARCH" "$FULL_RULE"
done

}</value>
    </Value>
    <Value id="function_perform_audit_rules_privileged_commands_remediation" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function perform_audit_rules_privileged_commands_remediation</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value># Function to perform remediation for 'audit_rules_privileged_commands' rule
#
# Expects two arguments:
#
# audit_tool		tool used to load audit rules
# 			One of 'auditctl' or 'augenrules'
#
# min_auid		Minimum original ID the user logged in with
#
# Example Call(s):
#
#      perform_audit_rules_privileged_commands_remediation "auditctl" "500"
#      perform_audit_rules_privileged_commands_remediation "augenrules"	"1000"
#
function perform_audit_rules_privileged_commands_remediation {
#
# Load function arguments into local variables
local tool="$1"
local min_auid="$2"

# Check sanity of the input
if [ $# -ne "2" ]
then
	echo "Usage: perform_audit_rules_privileged_commands_remediation 'auditctl | augenrules' '500 | 1000'"
	echo "Aborting."
	exit 1
fi

declare -a files_to_inspect=()

# Check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	exit 1
# If the audit tool is 'auditctl', then:
# * add '/etc/audit/audit.rules'to the list of files to be inspected,
# * specify '/etc/audit/audit.rules' as the output audit file, where
#   missing rules should be inserted
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect=("/etc/audit/audit.rules")
	output_audit_file="/etc/audit/audit.rules"
#
# If the audit tool is 'augenrules', then:
# * add '/etc/audit/rules.d/*.rules' to the list of files to be inspected
#   (split by newline),
# * specify /etc/audit/rules.d/privileged.rules' as the output file, where
#   missing rules should be inserted
elif [ "$tool" == 'augenrules' ]
then
	readarray -t files_to_inspect &lt; &lt;(find /etc/audit/rules.d -maxdepth 1 -type f -name '*.rules' -print)
	output_audit_file="/etc/audit/rules.d/privileged.rules"
fi

# Obtain the list of SUID/SGID binaries on the particular system (split by newline)
# into privileged_binaries array
privileged_binaries=()
readarray -t privileged_binaries &lt; &lt;(find / -not \( -fstype afs -o -fstype ceph -o -fstype cifs -o -fstype smb3 -o -fstype smbfs -o -fstype sshfs -o -fstype ncpfs -o -fstype ncp -o -fstype nfs -o -fstype nfs4 -o -fstype gfs -o -fstype gfs2 -o -fstype glusterfs -o -fstype gpfs -o -fstype pvfs2 -o -fstype ocfs2 -o -fstype lustre -o -fstype davfs -o -fstype fuse.sshfs \) -type f \( -perm -4000 -o -perm -2000 \) 2&gt; /dev/null)

# Keep list of SUID/SGID binaries that have been already handled within some previous iteration
declare -a sbinaries_to_skip=()

# For each found sbinary in privileged_binaries list
for sbinary in "${privileged_binaries[@]}"
do

	# Check if this sbinary wasn't already handled in some of the previous sbinary iterations
	# Return match only if whole sbinary definition matched (not in the case just prefix matched!!!)
	if [[ $(sed -ne "\|${sbinary}|p" &lt;&lt;&lt; "${sbinaries_to_skip[*]}") ]]
	then
		# If so, don't process it second time &amp; go to process next sbinary
		continue
	fi

	# Reset the counter of inspected files when starting to check
	# presence of existing audit rule for new sbinary
	local count_of_inspected_files=0

	# Define expected rule form for this binary
	expected_rule="-a always,exit -F path=${sbinary} -F auid&gt;=${min_auid} -F auid!=unset -F key=privileged"

	# If list of audit rules files to be inspected is empty, just add new rule and move on to next binary
	if [[ ${#files_to_inspect[@]} -eq 0 ]]; then
		echo "$expected_rule" &gt;&gt; "$output_audit_file"
		continue
	fi

	# Replace possible slash '/' character in sbinary definition so we could use it in sed expressions below
	sbinary_esc=${sbinary//$'/'/$'\/'}

	# For each audit rules file from the list of files to be inspected
	for afile in "${files_to_inspect[@]}"
	do

		# Search current audit rules file's content for match. Match criteria:
		# * existing rule is for the same SUID/SGID binary we are currently processing (but
		#   can contain multiple -F path= elements covering multiple SUID/SGID binaries)
		# * existing rule contains all arguments from expected rule form (though can contain
		#   them in arbitrary order)
	
		base_search=$(sed -e '/-a always,exit/!d' -e '/-F path='"${sbinary_esc}"'[^[:graph:]]/!d'		\
				-e '/-F path=[^[:space:]]\+/!d'						\
				-e '/-F auid&gt;='"${min_auid}"'/!d' -e '/-F auid!=\(4294967295\|unset\)/!d'	\
				-e '/-k \|-F key=/!d' "$afile")

		# Increase the count of inspected files for this sbinary
		count_of_inspected_files=$((count_of_inspected_files + 1))


		# Search current audit rules file's content for presence of rule pattern for this sbinary
		if [[ $base_search ]]
		then

			# Current audit rules file already contains rule for this binary =&gt;
			# Store the exact form of found rule for this binary for further processing
			concrete_rule=$base_search

			# Select all other SUID/SGID binaries possibly also present in the found rule

			readarray -t handled_sbinaries &lt; &lt;(grep -o -e "-F path=[^[:space:]]\+" &lt;&lt;&lt; "$concrete_rule")
			handled_sbinaries=("${handled_sbinaries[@]//-F path=/}")

			# Merge the list of such SUID/SGID binaries found in this iteration with global list ignoring duplicates
			readarray -t sbinaries_to_skip &lt; &lt;(for i in "${sbinaries_to_skip[@]}" "${handled_sbinaries[@]}"; do echo "$i"; done | sort -du)

			# if there is a -F perm flag, remove it
			if grep -q '.*-F\s\+perm=[rwxa]\+.*' &lt;&lt;&lt; "$concrete_rule"; then

				# Separate concrete_rule into three sections using hash '#'
				# sign as a delimiter around rule's permission section borders
				# note that the trailing space after perm flag is captured because there would be 
				# two consecutive spaces after joining remaining parts of the rule together
				concrete_rule="$(echo "$concrete_rule" | sed -n "s/\(.*\)\+\(-F perm=[rwax]\+\ \?\)\+/\1#\2#/p")"

				# Split concrete_rule into head, perm, and tail sections using hash '#' delimiter
				rule_head=$(cut -d '#' -f 1 &lt;&lt;&lt; "$concrete_rule")
				rule_perm=$(cut -d '#' -f 2 &lt;&lt;&lt; "$concrete_rule")
				rule_tail=$(cut -d '#' -f 3 &lt;&lt;&lt; "$concrete_rule")

				# Remove permissions section from existing rule in the file
				sed -i "s#${rule_head}\(.*\)${rule_tail}#${rule_head}${rule_tail}#" "$afile"
			fi
		# If the required audit rule for particular sbinary wasn't found yet, insert it under following conditions:
		#
		# * in the "auditctl" mode of operation insert particular rule each time
		#   (because in this mode there's only one file -- /etc/audit/audit.rules to be inspected for presence of this rule),
		#
		# * in the "augenrules" mode of operation insert particular rule only once and only in case we have already
		#   searched all of the files from /etc/audit/rules.d/*.rules location (since that audit rule can be defined
		#   in any of those files and if not, we want it to be inserted only once into /etc/audit/rules.d/privileged.rules file)
		#
		elif [ "$tool" == "auditctl" ] || [[ "$tool" == "augenrules" &amp;&amp; $count_of_inspected_files -eq "${#files_to_inspect[@]}" ]]
		then

			# Check if this sbinary wasn't already handled in some of the previous afile iterations
			# Return match only if whole sbinary definition matched (not in the case just prefix matched!!!)
			if [[ ! $(sed -ne "\|${sbinary}|p" &lt;&lt;&lt; "${sbinaries_to_skip[*]}") ]]
			then
				# Current audit rules file's content doesn't contain expected rule for this
				# SUID/SGID binary yet =&gt; append it
				echo "$expected_rule" &gt;&gt; "$output_audit_file"
			fi

			continue
		fi

	done

done
}</value>
    </Value>
    <Value id="function_populate" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function populate</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value># The populate function isn't directly used by SSG at the moment but it can be 
# used for testing purposes and will be used in SSG Testsuite in the future.

function populate {
# code to populate environment variables needed (for unit testing)
if [ -z "${!1}" ]; then
	echo "$1 is not defined. Exiting."
	exit
fi
}</value>
    </Value>
    <Value id="function_replace_or_append" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function replace_or_append</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value># Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append &lt;config_file_location&gt; &lt;key_to_search&gt; &lt;new_value&gt; [&lt;CCE number or literal '@CCENUM@' if unknown&gt;] [printf-like format, default is '$default_format']" &gt;&amp;2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] &amp;&amp; [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' &lt;&lt;&lt; "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \&gt;),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\&gt;" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\&gt;.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" &gt;&gt; "$config_file"
    printf '%s\n' "$formatted_output" &gt;&gt; "$config_file"
  fi
}</value>
    </Value>
    <Value id="function_set_faillock_option_to_value_in_pam_file" hidden="true" prohibitChanges="true" operator="equals" type="string">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Remediation function set_faillock_option_to_value_in_pam_file</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value>function set_faillock_option_to_value_in_pam_file {
	# If invoked with no arguments, exit. This is an intentional behavior.
	[ $# -gt 1 ] || return 0
	[ $# -ge 3 ] || die "$0 requires exactly zero, three, or four arguments"
	[ $# -le 4 ] || die "$0 requires exactly zero, three, or four arguments"
	local _pamFile="$1" _option="$2" _value="$3" _insert_lines_callback="$4"
	# pam_faillock.so already present?
	if grep -q "^auth.*pam_faillock.so.*" "$_pamFile"; then

		# pam_faillock.so present, is the option present?
		if grep -q "^auth.*[default=die].*pam_faillock.so.*authfail.*$_option=" "$_pamFile"; then

			# both pam_faillock.so &amp; option present, just correct option to the right value
			sed -i --follow-symlinks "s/\(^auth.*required.*pam_faillock.so.*preauth.*silent.*\)\($_option *= *\).*/\1\2$_value/" "$_pamFile"
			sed -i --follow-symlinks "s/\(^auth.*[default=die].*pam_faillock.so.*authfail.*\)\($_option *= *\).*/\1\2$_value/" "$_pamFile"

		# pam_faillock.so present, but the option not yet
		else

			# append correct option value to appropriate places
			sed -i --follow-symlinks "/^auth.*required.*pam_faillock.so.*preauth.*silent.*/ s/$/ $_option=$_value/" "$_pamFile"
			sed -i --follow-symlinks "/^auth.*[default=die].*pam_faillock.so.*authfail.*/ s/$/ $_option=$_value/" "$_pamFile"
		fi

	# pam_faillock.so not present yet
	else
		test -z "$_insert_lines_callback" || "$_insert_lines_callback" "$_option" "$_value" "$_pamFile"
		# insert pam_faillock.so preauth &amp; authfail rows with proper value of the option in question
	fi
}</value>
    </Value>
  </Group>
  <Group id="java">
    <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Java</title>
    <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Java is a general-purpose computer programming language. It is intended to
let application developers "write once, run anywhere." Java applications are
typically compiled to bytecode that can run on any Java virtual machine (JVM)
regardless of computer architecture. As such, the Java runtime environment (JRE)
is required to be installed so that Java applications can run. This section
provides settings for configuring Java policies to meet compliance
settings for Java running on Red Hat Enterprise Linux systems.
<html:br xmlns:html="http://www.w3.org/1999/xhtml"/><html:br xmlns:html="http://www.w3.org/1999/xhtml"/>
<html:ul xmlns:html="http://www.w3.org/1999/xhtml">Refer to <html:li><html:a href="https://docs.oracle.com/javase/6/docs/technotes/guides/deployment/deployment-guide/properties.html">https://docs.oracle.com/javase/6/docs/technotes/guides/deployment/deployment-guide/properties.html</html:a></html:li>
for a list of currently supported Java version 6 settings.</html:ul>
<html:ul xmlns:html="http://www.w3.org/1999/xhtml">Refer to <html:li><html:a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jweb/jcp/properties.html">https://docs.oracle.com/javase/7/docs/technotes/guides/jweb/jcp/properties.html</html:a></html:li>
for a list of currently supported Java version 7 settings.</html:ul>
<html:ul xmlns:html="http://www.w3.org/1999/xhtml">Refer to <html:li><html:a href="https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/properties.html">https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/properties.html</html:a></html:li>
for a list of currently supported Java version 8 settings.</html:ul></description>
    <Rule id="java_jre_deployment_properties_exists" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Java deployment.properties File Exists</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">If the Java deployment properties file does not exist, it can be added
by running:
<html:pre xmlns:html="http://www.w3.org/1999/xhtml">$ sudo mkdir -p -m 755 /etc/.java/deployment
$ sudo touch /etc/.java/deployment/deployment.properties
$ sudo chmod 644 /etc/.java/deployment/deployment.properties</html:pre></description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000516</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000366</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-6(b)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000030</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Each option in the Java control panel is represented by property keys.
These keys adjust the options in the Java control panel based on the value
assigned to that key. By default no deployment.properties file exists; thus,
no system-wide deployment exists. Without the deployment.properties file, setting particular
options for the Java control panel is impossible.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_deployment_properties_exists" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

chmod 644 ${JAVA_PROPERTIES}
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_deployment_properties_exists" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000030
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - java_jre_deployment_properties_exists
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Ensure Java deployment.properties File Exists
  file:
    path: /etc/.java/deployment/deployment.properties
    state: touch
    mode: '0644'
  tags:
    - DISA-STIG-JRE8-UX-000030
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - java_jre_deployment_properties_exists
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_deployment_properties_exists:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_deployment_properties_exists_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_validation_ocsp" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enable Online Certificate Validation</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that online certificate verification is enabled, set
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.validation.ocsp</html:code> to equal <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>
in <html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000175</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000185</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5(2)(a)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000100</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Online certificate validation provides a greater degree of validation of certificates
when running a signed Java applet. Permitting execution of an applet with an invalid
certificate may result in malware execution , system modification, invasion of privacy,
and denial of service.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_validation_ocsp" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.validation.ocsp=.*" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.validation.ocsp=.*/deployment.security.validation.ocsp=true/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.validation.ocsp=true" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_validation_ocsp" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000100
    - NIST-800-53-IA-5(2)(a)
    - configure_strategy
    - java_jre_validation_ocsp
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Enable Online Certificate Validation
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.validation.ocsp=.*
    line: deployment.security.validation.ocsp=true
  tags:
    - DISA-STIG-JRE8-UX-000100
    - NIST-800-53-IA-5(2)(a)
    - configure_strategy
    - java_jre_validation_ocsp
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_validation_ocsp:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_validation_ocsp_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_enable_jws_locked" selected="false" severity="high">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable User Access to Java Web Start Application Setting</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that users cannot change the Java Web Start (JWS) application
setting, add <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.webjava.enabled.locked</html:code> to
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000516</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000366</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-6(b)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000070</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Due to the popularity of Java Web Start (JWS) applications, denying these
applications could have a negative impact to the user experience. Whitelisting,
blacklisting, and signing of applications help mitigate the risk of running
JWS applications.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_enable_jws_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.webjava.enabled.locked$" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.webjava.enabled.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_enable_jws_locked" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000070
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - high_severity
    - java_jre_enable_jws_locked
    - low_complexity
    - low_disruption
    - no_reboot_needed

- name: Disable User Access to Java Web Start Application Setting
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.webjava.enabled.locked
    line: deployment.webjava.enabled.locked
  tags:
    - DISA-STIG-JRE8-UX-000070
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - high_severity
    - java_jre_enable_jws_locked
    - low_complexity
    - low_disruption
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_enable_jws_locked:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_enable_jws_locked_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_updated" selected="false" severity="low">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Ensure Java Patches Installed</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">If the system is joined to the Red Hat Network, a Red Hat Satellite Server,
or a yum server, run the following command to install updates:
<html:pre xmlns:html="http://www.w3.org/1999/xhtml">$ sudo yum update</html:pre>
If the system is not configured to use one of these sources, updates (in the form of RPM packages)
can be manually downloaded and installed using <html:code xmlns:html="http://www.w3.org/1999/xhtml">rpm</html:code>.
<html:br xmlns:html="http://www.w3.org/1999/xhtml"/><html:br xmlns:html="http://www.w3.org/1999/xhtml"/>
NOTE: U.S. Defense systems are required to be patched within 30 days or sooner as local policy
dictates.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000456</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-002605</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SI-2(c)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000180</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Running an older version of the JRE can introduce security
vulnerabilities to the system.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_updated" system="urn:xccdf:fix:script:sh">

yum -y update
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_updated" system="urn:xccdf:fix:script:ansible" reboot="true" complexity="low" disruption="high" strategy="patch">- name: Security patches are up to date
  package:
    name: '*'
    state: latest
  tags:
    - DISA-STIG-JRE8-UX-000180
    - NIST-800-53-SI-2(c)
    - high_disruption
    - java_jre_updated
    - low_complexity
    - low_severity
    - patch_strategy
    - reboot_required
    - skip_ansible_lint
</fix>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_updated_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_lock_untrusted_sources" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Lock Execution of Signed Java Applets From Untrusted Sources Setting</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that Java cannot execute from untrusted sources, set
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.askgrantdialog.show</html:code> to equal <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code>
in <html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000112</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001695</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SC-18 (3)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000090</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Permitting execution of signed Java applets from un-trusted sources may
result in acquiring malware, and risks system modification, invasion of
privacy, or denial of service. Block users from granting permissions to
applets and JWS applications.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_lock_untrusted_sources" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.askgrantdialog.show=.*$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.askgrantdialog.show=.*/deployment.security.askgrantdialog.show=false/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.askgrantdialog.show=false" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_lock_untrusted_sources" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000090
    - NIST-800-53-SC-18 (3)
    - configure_strategy
    - java_jre_lock_untrusted_sources
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Lock Execution of Signed Java Applets From Untrusted Sources Setting
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.askgrantdialog.show=.*
    line: deployment.security.askgrantdialog.show=false
  tags:
    - DISA-STIG-JRE8-UX-000090
    - NIST-800-53-SC-18 (3)
    - configure_strategy
    - java_jre_lock_untrusted_sources
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_lock_untrusted_sources:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_lock_untrusted_sources_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_disable_untrusted_sources" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable Execution of Signed Java Applets From Untrusted Sources Setting</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that Java cannot execute from untrusted sources, set
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.askgrantdialog.notinca</html:code> to equal <html:code xmlns:html="http://www.w3.org/1999/xhtml">false</html:code>
in <html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000112</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001695</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SC-18 (3)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000080</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Permitting execution of signed Java applets from un-trusted sources may
result in acquiring malware, and risks system modification, invasion of
privacy, or denial of service. Block users from granting permissions to
certificates that are not issued by a CA in the Root/JSSE CA certificate
store.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_disable_untrusted_sources" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.askgrantdialog.notinca=.*$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.askgrantdialog.notinca=.*/deployment.security.askgrantdialog.notinca=false/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.askgrantdialog.notinca=false" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_disable_untrusted_sources" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000080
    - NIST-800-53-SC-18 (3)
    - configure_strategy
    - java_jre_disable_untrusted_sources
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Disable Execution of Signed Java Applets From Untrusted Sources Setting
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.askgrantdialog.notinca=.*
    line: deployment.security.askgrantdialog.notinca=false
  tags:
    - DISA-STIG-JRE8-UX-000080
    - NIST-800-53-SC-18 (3)
    - configure_strategy
    - java_jre_disable_untrusted_sources
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_disable_untrusted_sources:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_disable_untrusted_sources_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_security_revocation_check_locked" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable User Access to Revocation Check Settings</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that users cannot change certificate revocation check settings,
add <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.revocation.check.locked</html:code> to
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000401</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001991</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5(2)(d)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000160</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Permitting execution of an applet published with a revoked certificate may
result in spoofing, malware, system modification, invasion of privacy,
and denial of service. As such, ensuring users cannot change settings
contributes to a more consistent security profile.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_security_revocation_check_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.revocation.check.locked$" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.revocation.check.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_security_revocation_check_locked" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000160
    - NIST-800-53-IA-5(2)(d)
    - configure_strategy
    - java_jre_security_revocation_check_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Disable User Access to Revocation Check Settings
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.revocation.check.locked
    line: deployment.security.revocation.check.locked
  tags:
    - DISA-STIG-JRE8-UX-000160
    - NIST-800-53-IA-5(2)(d)
    - configure_strategy
    - java_jre_security_revocation_check_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_security_revocation_check_locked:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_security_revocation_check_locked_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_disable_untrusted_sources_locked" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable User Access to Disabling Untrusted Sources Setting</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that users cannot change the untrusted sources settings,
add <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.askgrantdialog.notinca.locked</html:code> to
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000112</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001695</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SC-18 (3)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000080</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Permitting execution of signed Java applets from un-trusted sources may
result in malware running on the system, and risks system modification,
invasion of privacy, or denial of service. As such, ensuring users cannot
change the permission settings which control the execution of signed Java
applets contributes to a more consistent security profile.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_disable_untrusted_sources_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.askgrantdialog.notinca.locked$" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.askgrantdialog.notinca.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_disable_untrusted_sources_locked" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000080
    - NIST-800-53-SC-18 (3)
    - configure_strategy
    - java_jre_disable_untrusted_sources_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Disable User Access to Disabling Untrusted Sources Setting
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.askgrantdialog.notinca.locked
    line: deployment.security.askgrantdialog.notinca.locked
  tags:
    - DISA-STIG-JRE8-UX-000080
    - NIST-800-53-SC-18 (3)
    - configure_strategy
    - java_jre_disable_untrusted_sources_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_disable_untrusted_sources_locked:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_disable_untrusted_sources_locked_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_blacklist_check" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Prevent the Download of Prohibited Mobile Code</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that Java prevents the download of prohibited mobile code, set
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.blacklist.check</html:code> to equal <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code> in
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000209</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001169</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SC-18(3)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000110</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Mobile code has the potential to cause damage to information systems within
an organization if used maliciously. Therefore it is important to allow vetted
mobile code and prevent potentially malicious execution of mobile code.
Mobile code has the potential to cause damage to information systems within
an organization if used maliciously. Therefore it is important to allow vetted
mobile code and prevent potentially malicious execution of mobile code.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_blacklist_check" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.blacklist.check=.*$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.blacklist.check=.*/deployment.security.blacklist.check=true/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.blacklist.check=true" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_blacklist_check" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000110
    - NIST-800-53-SC-18(3)
    - configure_strategy
    - java_jre_blacklist_check
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Prevent the Download of Prohibited Mobile Code
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.blacklist.check=.*
    line: deployment.security.blacklist.check=true
  tags:
    - DISA-STIG-JRE8-UX-000110
    - NIST-800-53-SC-18(3)
    - configure_strategy
    - java_jre_blacklist_check
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_blacklist_check:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_blacklist_check_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_unsigned_applications" selected="false" severity="high">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable Execution of Unsigned Applications</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that Java does not allow unsigned applications to run, set
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.level</html:code> to equal <html:code xmlns:html="http://www.w3.org/1999/xhtml">VERY_HIGH</html:code> in
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000516</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000366</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-6(b)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000060</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Unsigned applications could perform numerous types of attacks on a system.
Applications that are signed with a valid certificate and include the
permissions attribute in the manifest for the main JAR file are allowed to
run with security prompts. All other applications are blocked.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_unsigned_applications" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.level=.*$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.level=.*/deployment.security.level=VERY_HIGH/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.level=VERY_HIGH" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_unsigned_applications" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000060
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - high_severity
    - java_jre_unsigned_applications
    - low_complexity
    - low_disruption
    - no_reboot_needed

- name: Disable Execution of Unsigned Applications
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.level=.*
    line: deployment.security.level=VERY_HIGH
  tags:
    - DISA-STIG-JRE8-UX-000060
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - high_severity
    - java_jre_unsigned_applications
    - low_complexity
    - low_disruption
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_unsigned_applications:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_unsigned_applications_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_security_revocation_check" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enable Revocation Checks for Publisher Certificates</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that certificate revocation checks are enabled, set
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.revocation.check</html:code> to equal <html:code xmlns:html="http://www.w3.org/1999/xhtml">ALL_CERTIFICATES</html:code>
in <html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000401</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001991</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5(2)(d)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000160</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Certificates may be revoked due to improper issuance, compromise of the certificate,
and failure to adhere to policy. Therefore, any certificate found on a CRL
should not be trusted. Permitting execution of an applet published with a
revoked certificate may result in spoofing, malware, system modification,
invasion of privacy, and denial of service.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_security_revocation_check" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.revocation.check=.*" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.revocation.check=.*/deployment.security.revocation.check=ALL_CERTIFICATES/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.revocation.check=ALL_CERTIFICATES" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_security_revocation_check" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000160
    - NIST-800-53-IA-5(2)(d)
    - configure_strategy
    - java_jre_security_revocation_check
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Enable Revocation Checks for Publisher Certificates
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.revocation.check=.*
    line: deployment.security.revocation.check=ALL_CERTIFICATES
  tags:
    - DISA-STIG-JRE8-UX-000160
    - NIST-800-53-IA-5(2)(d)
    - configure_strategy
    - java_jre_security_revocation_check
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_security_revocation_check:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_security_revocation_check_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_validation_crl_locked" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable User Access to Certificate Revocation List Settings</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that users cannot change certificate revocation list settings,
add <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.validation.crl.locked</html:code> to
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000401</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001991</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5(2)(d)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000150</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Permitting execution of an applet published with a revoked certificate may
result in spoofing, malware, system modification, invasion of privacy, and
denial of service. This is why it is important to ensure to check against a
Certificate Revocation List. As such, ensuring users cannot change settings
contributes to a more consistent security profile.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_validation_crl_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.validation.crl.locked$" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.validation.crl.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_validation_crl_locked" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000150
    - NIST-800-53-IA-5(2)(d)
    - configure_strategy
    - java_jre_validation_crl_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Disable User Access to Certificate Revocation List Settings
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.validation.crl.locked
    line: deployment.security.validation.crl.locked
  tags:
    - DISA-STIG-JRE8-UX-000150
    - NIST-800-53-IA-5(2)(d)
    - configure_strategy
    - java_jre_validation_crl_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_validation_crl_locked:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_validation_crl_locked_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_configure_crypto_policy" selected="false" severity="unknown">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Configure Java Runtime to use System Crypto Policy</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Crypto Policies provide a centralized control over crypto algorithms usage of many packages.
Java is supported by crypto policy, but the Java configuration may be
set up to ignore it.

To check that Crypto Policies settings are configured correctly, you have to examine the JRE config file
available under <html:code xmlns:html="http://www.w3.org/1999/xhtml">/usr/lib/jvm/jre/lib/security/java.security</html:code>.
If this config file contains the line <html:code xmlns:html="http://www.w3.org/1999/xhtml">security.useSystemPropertiesFile=true</html:code>,
settings that are part of the system-wide crypto policy take precedence.</description>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Overriding the system crypto policy makes the behavior of the Java runtime violates expectations,
and makes system configuration more fragmented.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_configure_crypto_policy" system="urn:xccdf:fix:script:sh">


JRE_CONFIG_FILE="/usr/lib/jvm/jre/lib/security/java.security"
<xccdf-1.1:sub xmlns:xccdf-1.1="http://checklists.nist.gov/xccdf/1.1" idref="function_replace_or_append"/>
replace_or_append "$JRE_CONFIG_FILE" '^security.useSystemPropertiesFile' 'true' '' '%s=%s'
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_configure_crypto_policy" system="urn:xccdf:fix:script:ansible" reboot="true" complexity="low" disruption="medium" strategy="disable">- name: Configure Java Runtime to use System Crypto Policy
  lineinfile:
    create: true
    dest: /usr/lib/jvm/jre/lib/security/java.security
    regexp: ^\s*#?\s*security.useSystemPropertiesFile=true
    line: security.useSystemPropertiesFile=true
  tags:
    - disable_strategy
    - java_jre_configure_crypto_policy
    - low_complexity
    - medium_disruption
    - reboot_required
    - unknown_severity
</fix>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_configure_crypto_policy_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_validation_crl" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enable Use of Certificate Revocation Lists</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that certificate revocation lists are enabled, set
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.validation.crl</html:code> to equal <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>
in <html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000401</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001991</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5(2)(d)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000150</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">A certificate revocation list is a directory which contains a list of
certificates that have been revoked for various reasons. Certificates may be
revoked due to improper issuance, compromise of the certificate, and failure
to adhere to policy. Therefore, any certificate found on a CRL should not be
trusted. Permitting execution of an applet published with a revoked
certificate may result in spoofing, malware, system modification, invasion
of privacy, and denial of service.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_validation_crl" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.validation.crl=.*" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.validation.crl=.*/deployment.security.validation.crl=true/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.validation.crl=true" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_validation_crl" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000150
    - NIST-800-53-IA-5(2)(d)
    - configure_strategy
    - java_jre_validation_crl
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Enable Use of Certificate Revocation Lists
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.validation.crl=.*
    line: deployment.security.validation.crl=true
  tags:
    - DISA-STIG-JRE8-UX-000150
    - NIST-800-53-IA-5(2)(d)
    - configure_strategy
    - java_jre_validation_crl
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_validation_crl:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_validation_crl_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_lock_untrusted_sources_locked" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable User Access to Locking Untrusted Sources Setting</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that users cannot change the untrusted sources settings,
add <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.askgrantdialog.show.locked</html:code> to
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000112</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001695</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SC-18 (3)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000090</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Permitting execution of signed Java applets from un-trusted sources may
result in malware running on the system, and risks system modification,
invasion of privacy, or denial of service. As such, ensuring users cannot
change the permission settings which control the execution of signed Java
applets contributes to a more consistent security profile.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_lock_untrusted_sources_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.askgrantdialog.show.locked$" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.askgrantdialog.show.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_lock_untrusted_sources_locked" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000090
    - NIST-800-53-SC-18 (3)
    - configure_strategy
    - java_jre_lock_untrusted_sources_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Disable User Access to Locking Untrusted Sources Setting
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.askgrantdialog.show.locked
    line: deployment.security.askgrantdialog.show.locked
  tags:
    - DISA-STIG-JRE8-UX-000090
    - NIST-800-53-SC-18 (3)
    - configure_strategy
    - java_jre_lock_untrusted_sources_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_lock_untrusted_sources_locked:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_lock_untrusted_sources_locked_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_clean_previous_version" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Ensure yum Removes Previous Package Versions</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US"><html:code xmlns:html="http://www.w3.org/1999/xhtml">yum</html:code> should be configured to remove previous versions of Java after
new versions have been installed. To configure <html:code xmlns:html="http://www.w3.org/1999/xhtml">yum</html:code> to remove the
previous versions of Java after updating, set the <html:code xmlns:html="http://www.w3.org/1999/xhtml">clean_requirements_on_remove</html:code>
to <html:code xmlns:html="http://www.w3.org/1999/xhtml">1</html:code> in <html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/yum.conf</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000454</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-002617</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SI-2(6)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000190</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Previous versions of software components that are not removed from the information
system after updates have been installed may be exploited by some adversaries.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_clean_previous_version" system="urn:xccdf:fix:script:sh">
if grep --silent ^clean_requirements_on_remove /etc/yum.conf ; then
        sed -i "s/^clean_requirements_on_remove.*/clean_requirements_on_remove=1/g" /etc/yum.conf
else
        echo -e "\n# Set clean_requirements_on_remove to 1 per security requirements" &gt;&gt; /etc/yum.conf
        echo "clean_requirements_on_remove=1" &gt;&gt; /etc/yum.conf
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_clean_previous_version" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="restrict">- name: Ensure YUM Removes Previous Package Versions
  lineinfile:
    dest: /etc/yum.conf
    regexp: ^#?clean_requirements_on_remove
    line: clean_requirements_on_remove=1
    insertafter: \[main\]
    create: true
  tags:
    - DISA-STIG-JRE8-UX-000190
    - NIST-800-53-SI-2(6)
    - java_jre_clean_previous_version
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
    - restrict_strategy
</fix>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_clean_previous_version_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_validation_ocsp_locked" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable User Access to Online Certificate Validation Setting</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that users cannot change the online certificate verification setting,
add <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.validation.ocsp.locked</html:code> to
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000175</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000185</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5(2)(a)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000100</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Online certificate validation provides a greater degree of validation of certificates
when running a signed Java applet. Permitting execution of an applet with an invalid
certificate may result in malware execution , system modification, invasion of privacy,
and denial of service. As such, ensuring users cannot change settings contributes to
a more consistent security profile.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_validation_ocsp_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.validation.ocsp.locked$" ${JAVA_PROPERTIES}

if ! [ $? -eq 0 ] ; then
  echo "deployment.security.validation.ocsp.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_validation_ocsp_locked" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000100
    - NIST-800-53-IA-5(2)(a)
    - configure_strategy
    - java_jre_validation_ocsp_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Disable User Access to Online Certificate Validation Setting
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.validation.ocsp.locked
    line: deployment.security.validation.ocsp.locked
  tags:
    - DISA-STIG-JRE8-UX-000100
    - NIST-800-53-IA-5(2)(a)
    - configure_strategy
    - java_jre_validation_ocsp_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_validation_ocsp_locked:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_validation_ocsp_locked_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_insecure_prompt" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Prompt User Prior to Executing Mobile Code</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that Java prevents mobile code from executing without prompting
the user, set <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.insecure.jres</html:code> to equal
<html:code xmlns:html="http://www.w3.org/1999/xhtml">PROMPT</html:code> in <html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000488</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-002460</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SC-18(4)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000170</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Mobile code has the potential to cause damage to information systems within
an organization if used maliciously. It can execute without explicit action
from, or notification to, a user. Requiring Java to enforce prompting the user prior
to executing mobile code will strenghten the security posture of the system.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_insecure_prompt" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.insecure.jres=.*$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.insecure.jres=.*/deployment.insecure.jres=PROMPT/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.insecure.jres=PROMPT" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_insecure_prompt" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000170
    - NIST-800-53-SC-18(4)
    - configure_strategy
    - java_jre_insecure_prompt
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Prompt User Prior to Executing Mobile Code
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.insecure.jres=.*
    line: deployment.insecure.jres=PROMPT
  tags:
    - DISA-STIG-JRE8-UX-000170
    - NIST-800-53-SC-18(4)
    - configure_strategy
    - java_jre_insecure_prompt
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_insecure_prompt:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_insecure_prompt_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_blacklist_check_locked" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable User Access to Prohibited Mobile Code Setting</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that users cannot change the download of prohibited mobile code
setting, add <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.blacklist.check.locked</html:code> to
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000209</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-001169</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SC-18(3)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000110</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Mobile code has the potential to cause damage to information systems within
an organization if used maliciously. Therefore, it is important to allow vetted
mobile code and prevent potentially malicious execution of mobile code.
As such, ensuring
users cannot change the permission settings which control the downloading of
prohibited mobile code contributes to a more consistent security profile.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_blacklist_check_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.webjava.enabled.locked$" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.webjava.enabled.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_blacklist_check_locked" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000110
    - NIST-800-53-SC-18(3)
    - configure_strategy
    - java_jre_blacklist_check_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Disable User Access to Prohibited Mobile Code Setting
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.blacklist.check.locked
    line: deployment.security.blacklist.check.locked
  tags:
    - DISA-STIG-JRE8-UX-000110
    - NIST-800-53-SC-18(3)
    - configure_strategy
    - java_jre_blacklist_check_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_blacklist_check_locked:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_blacklist_check_locked_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_unsigned_applications_locked" selected="false" severity="high">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable User Access to Unsigned Applications Setting</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that users cannot change the unsigned applications setting, add
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.security.level.locked</html:code> to
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000516</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000366</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-6(b)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000060</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Unsigned applications could perform numerous types of attacks on a system.
As such, ensuring users cannot change the permission settings which control
the execution of unsigned Java applications contributes to a more consistent
security profile.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_unsigned_applications_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.security.level.locked$" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.level.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_unsigned_applications_locked" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000060
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - high_severity
    - java_jre_unsigned_applications_locked
    - low_complexity
    - low_disruption
    - no_reboot_needed

- name: Disable User Access to Unsigned Applications Setting
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.security.level.locked
    line: deployment.security.level.locked
  tags:
    - DISA-STIG-JRE8-UX-000060
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - high_severity
    - java_jre_unsigned_applications_locked
    - low_complexity
    - low_disruption
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_unsigned_applications_locked:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_unsigned_applications_locked_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_insecure_prompt_locked" selected="false" severity="medium">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Disable User Access to Insecure Prompt of Mobile Code Setting</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that users cannot change the mobile code setting for insecure
prompts, add <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.insecure.jres.locked</html:code> to
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000488</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-002460</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SC-18(4)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000170</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Mobile code has the potential to cause damage to information systems within
an organization if used maliciously. It can execute without explicit action
from, or notification to, a user. Requiring Java to enforce prompting the user
prior to executing mobile code will strengthen the security posture of the
system. As such, ensuring users cannot change the permission settings which
control the insecure prompts for mobile code execution contributes to a more
consistent security profile.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_insecure_prompt_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.insecure.jres.locked$" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.insecure.jres.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_insecure_prompt_locked" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000170
    - NIST-800-53-SC-18(4)
    - configure_strategy
    - java_jre_insecure_prompt_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Disable User Access to Insecure Prompt of Mobile Code Setting
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.insecure.jres.locked
    line: deployment.insecure.jres.locked
  tags:
    - DISA-STIG-JRE8-UX-000170
    - NIST-800-53-SC-18(4)
    - configure_strategy
    - java_jre_insecure_prompt_locked
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_insecure_prompt_locked:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_insecure_prompt_locked_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Rule id="java_jre_enable_jws" selected="false" severity="high">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Enable Java Web Start Applications to Run</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that Java allows applets or Java Web Start (JWS) applications to
run, set <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.webjava.enabled</html:code> to equal <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code> in
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000516</reference>
      <reference href="https://public.cyber.mil/stigs/cci/">CCI-000366</reference>
      <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-6(b)</reference>
      <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000070</reference>
      <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Due to the popularity of Java Web Start (JWS) applications, denying these
applications could have a negative impact to the user experience. Whitelisting,
blacklisting, and signing of applications help mitigate the risk of running
JWS applications.</rationale>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_enable_jws" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

grep -q "^deployment.webjava.enabled=.*$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.webjava.enabled=.*/deployment.webjava.enabled=true/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.webjava.enabled=true" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
      <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_enable_jws" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000070
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - high_severity
    - java_jre_enable_jws
    - low_complexity
    - low_disruption
    - no_reboot_needed

- name: Enable Java Web Start Applications to Run
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.webjava.enabled=.*
    line: deployment.webjava.enabled=true
  tags:
    - DISA-STIG-JRE8-UX-000070
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - high_severity
    - java_jre_enable_jws
    - low_complexity
    - low_disruption
    - no_reboot_needed
</fix>
      <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
        <check-content-ref name="oval:ssg-java_jre_enable_jws:def:1" href="ssg-jre-oval.xml"/>
      </check>
      <check system="http://scap.nist.gov/schema/ocil/2">
        <check-content-ref name="ocil:ssg-java_jre_enable_jws_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
      </check>
    </Rule>
    <Group id="java_jre_accepted_sites_configured">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Configure the exception.sites File</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Utilizing a whitelist provides a configuration management method for
allowing the execution of only authorized software. Using only authorized
software decreases risk by limiting the number of potential vulnerabilities.
The <html:code xmlns:html="http://www.w3.org/1999/xhtml">exception.sites</html:code> file is used for ensuring that authorized
software is allowed to be executed. To ensure that the Java
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code> file is configured
correctly, <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.user.security.exception.sites</html:code> must be configured
to point to a valid <html:code xmlns:html="http://www.w3.org/1999/xhtml">exception.sites</html:code> file.</description>
      <Rule id="java_jre_accepted_sites_exists" selected="false" severity="medium">
        <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Java exception.sites File Exists</title>
        <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">By default, no <html:code xmlns:html="http://www.w3.org/1999/xhtml">exception.sites</html:code> file exists which means that there is no prevention of
unauthorized software. The <html:code xmlns:html="http://www.w3.org/1999/xhtml">exception.sites</html:code> file is a text file containing single-line URLs for
accepted risk sites. If the Java accepted sites list file does not exist, it can be added
by running:
<html:pre xmlns:html="http://www.w3.org/1999/xhtml">$ sudo mkdir -p -m 755 /etc/.java/deployment
$ sudo touch /etc/.java/deployment/exception.sites
$ sudo chmod 644 /etc/.java/deployment/exception.sites</html:pre></description>
        <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000386</reference>
        <reference href="https://public.cyber.mil/stigs/cci/">CCI-001774</reference>
        <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7(5)(b)</reference>
        <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000130</reference>
        <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Utilizing a
whitelist provides a configuration management method for allowing the
execution of only authorized software. Using only authorized software
decreases risk by limiting the number of potential vulnerabilities.</rationale>
        <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_accepted_sites_exists" system="urn:xccdf:fix:script:sh">JAVA_FILE="/etc/.java/deployment/exception.sites"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_FILE} ]; then
  touch ${JAVA_FILE} &amp;&amp; chmod 644 ${JAVA_FILE}
fi

chmod 644 ${JAVA_FILE}
</fix>
        <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_accepted_sites_exists" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000130
    - NIST-800-53-CM-7(5)(b)
    - configure_strategy
    - java_jre_accepted_sites_exists
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Ensure Java exception.sites File Exists
  file:
    path: /etc/.java/deployment/exception.sites
    state: touch
    mode: '0644'
  tags:
    - DISA-STIG-JRE8-UX-000130
    - NIST-800-53-CM-7(5)(b)
    - configure_strategy
    - java_jre_accepted_sites_exists
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
        <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
          <check-content-ref name="oval:ssg-java_jre_accepted_sites_exists:def:1" href="ssg-jre-oval.xml"/>
        </check>
        <check system="http://scap.nist.gov/schema/ocil/2">
          <check-content-ref name="ocil:ssg-java_jre_accepted_sites_exists_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
        </check>
      </Rule>
      <Rule id="java_jre_accepted_sites_properties" selected="false" severity="medium">
        <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Configure the Path to the exception.sites File</title>
        <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that the accepted sites list file is set in
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>, add or modify
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.user.security.exception.sites</html:code> to equal
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/exception.sites</html:code>.</description>
        <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000386</reference>
        <reference href="https://public.cyber.mil/stigs/cci/">CCI-001774</reference>
        <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7(5)(b)</reference>
        <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000120</reference>
        <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Without a proper path for the accepted sites list file, unauthorized
software programs are able to be executed. Using only authorized software
decreases risk by limiting the number of potential vulnerabilities.</rationale>
        <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_accepted_sites_properties" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

JAVA_FILE="/etc/.java/deployment/exception.sites"

grep -q "^deployment.user.security.exception.sites=.*" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s;deployment.user.security.exception.sites=.*;deployment.user.security.exception.sites=${JAVA_FILE};g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.user.security.exception.sites=${JAVA_FILE}" &gt;&gt; ${JAVA_PROPERTIES}
fi
</fix>
        <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_accepted_sites_properties" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000120
    - NIST-800-53-CM-7(5)(b)
    - configure_strategy
    - java_jre_accepted_sites_properties
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Configure the Path to the exception.sites File
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.properties
    regexp: ^\s*#?\s*deployment.user.security.exception.sites=.*
    line: deployment.user.security.exception.sites=/etc/.java/deployment/exception.sites
  tags:
    - DISA-STIG-JRE8-UX-000120
    - NIST-800-53-CM-7(5)(b)
    - configure_strategy
    - java_jre_accepted_sites_properties
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
        <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
          <check-content-ref name="oval:ssg-java_jre_accepted_sites_properties:def:1" href="ssg-jre-oval.xml"/>
        </check>
        <check system="http://scap.nist.gov/schema/ocil/2">
          <check-content-ref name="ocil:ssg-java_jre_accepted_sites_properties_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
        </check>
      </Rule>
    </Group>
    <Group id="java_jre_deployment_config_configured">
      <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Configure the deployment.config File</title>
      <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.config</html:code> file if used for specifying the System-level
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.properties</html:code> file. The System-level configuration for Java is
configured in <html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment</html:code>. By default, no <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.config</html:code>
file exists. To ensure that the Java <html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.config</html:code> file
is configured correctly, <html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.system.config</html:code> and
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.system.config.mandatory</html:code> need to be set correctly.</description>
      <Rule id="java_jre_deployment_config_mandatory" selected="false" severity="medium">
        <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Configure The Java Deployment Mandatory Setting</title>
        <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To configure the Java mandatory deployment setting, add or modify
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.system.config.mandatory</html:code> to equal <html:code xmlns:html="http://www.w3.org/1999/xhtml">true</html:code>
in <html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.config</html:code>.</description>
        <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000516</reference>
        <reference href="https://public.cyber.mil/stigs/cci/">CCI-000366</reference>
        <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-6(b)</reference>
        <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000020</reference>
        <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Without a proper path for the properties file, deployment would not be possible.
If the path specified does not lead to a properties file, the value of the
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.system.config.mandatory</html:code> key determines how to handle the situation.
If the value of this key is true, JRE will not allow Java applications to run if
the path to the properties file is invalid.</rationale>
        <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_deployment_config_mandatory" system="urn:xccdf:fix:script:sh">JAVA_CONFIG="/etc/.java/deployment/deployment.config"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_CONFIG} ]; then
  touch ${JAVA_CONFIG} &amp;&amp; chmod 644 ${JAVA_CONFIG}
fi

grep -q "^deployment.system.config.mandatory=.*" ${JAVA_CONFIG} &amp;&amp; \
sed -i "s/deployment.system.config.mandatory=.*/deployment.system.config.mandatory=true/g" ${JAVA_CONFIG}
if ! [ $? -eq 0 ] ; then
  echo "deployment.system.config.mandatory=true" &gt;&gt; ${JAVA_CONFIG}
fi
</fix>
        <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_deployment_config_mandatory" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000020
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - java_jre_deployment_config_mandatory
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Configure The Java Deployment Mandatory Setting
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.config
    regexp: ^\s*#?\s*deployment.system.config.mandatory=.*
    line: deployment.system.config.mandatory=true
  tags:
    - DISA-STIG-JRE8-UX-000020
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - java_jre_deployment_config_mandatory
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
        <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
          <check-content-ref name="oval:ssg-java_jre_deployment_config_mandatory:def:1" href="ssg-jre-oval.xml"/>
        </check>
        <check system="http://scap.nist.gov/schema/ocil/2">
          <check-content-ref name="ocil:ssg-java_jre_deployment_config_mandatory_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
        </check>
      </Rule>
      <Rule id="java_jre_deployment_config_exists" selected="false" severity="medium">
        <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">The Java deployment.config File Exists</title>
        <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">If the Java deployment configuration file does not exist, it can be added
by running:
<html:pre xmlns:html="http://www.w3.org/1999/xhtml">$ sudo mkdir -p -m 755 /etc/.java/deployment
$ sudo touch /etc/.java/deployment/deployment.config
$ sudo chmod 644 /etc/.java/deployment/deployment.config</html:pre></description>
        <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000516</reference>
        <reference href="https://public.cyber.mil/stigs/cci/">CCI-000366</reference>
        <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-6(b)</reference>
        <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000010</reference>
        <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">By default no deployment.config file exists; thus, no system-wide deployment.properties file
exists. The file must be created. The deployment.config file is used for specifying the
location and execution of system-level properties for the Java Runtime Environment. Without
the deployment.config file, setting particular options for the Java control panel is
not possible.</rationale>
        <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_deployment_config_exists" system="urn:xccdf:fix:script:sh">JAVA_CONFIG="/etc/.java/deployment/deployment.config"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_CONFIG} ]; then
  touch ${JAVA_CONFIG} &amp;&amp; chmod 644 ${JAVA_CONFIG}
fi

chmod 644 ${JAVA_CONFIG}
</fix>
        <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_deployment_config_exists" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000010
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - java_jre_deployment_config_exists
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Ensure Java Config File Exists
  file:
    path: /etc/.java/deployment/deployment.config
    state: touch
    mode: '0644'
  tags:
    - DISA-STIG-JRE8-UX-000010
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - java_jre_deployment_config_exists
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
        <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
          <check-content-ref name="oval:ssg-java_jre_deployment_config_exists:def:1" href="ssg-jre-oval.xml"/>
        </check>
        <check system="http://scap.nist.gov/schema/ocil/2">
          <check-content-ref name="ocil:ssg-java_jre_deployment_config_exists_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
        </check>
      </Rule>
      <Rule id="java_jre_deployment_config_properties" selected="false" severity="medium">
        <title xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Configure the Path to the deployment.properties File</title>
        <description xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">To ensure that the Java properties file is set in
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.config</html:code>, add or modify
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.system.config</html:code> to equal
<html:code xmlns:html="http://www.w3.org/1999/xhtml">/etc/.java/deployment/deployment.properties</html:code>.</description>
        <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=application-servers">SRG-APP-000516</reference>
        <reference href="https://public.cyber.mil/stigs/cci/">CCI-000366</reference>
        <reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-6(b)</reference>
        <reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE8-UX-000020</reference>
        <rationale xmlns:xhtml="http://www.w3.org/1999/xhtml" xml:lang="en-US">Without a proper path for the properties file, deployment would not be possible.
If the path specified does not lead to a properties file, the value of the
<html:code xmlns:html="http://www.w3.org/1999/xhtml">deployment.system.config.mandatory</html:code> key determines how to handle the situation.
If the value of this key is true, JRE will not allow Java applications to run if
the path to the properties file is invalid.</rationale>
        <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_deployment_config_properties" system="urn:xccdf:fix:script:sh">JAVA_CONFIG="/etc/.java/deployment/deployment.config"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_CONFIG} ]; then
  touch ${JAVA_CONFIG} &amp;&amp; chmod 644 ${JAVA_CONFIG}
fi

JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"

grep -q "^deployment.system.config=.*" ${JAVA_CONFIG} &amp;&amp; \
sed -i "s;deployment.system.config=.*;deployment.system.config=file:\/\/${JAVA_PROPERTIES};g" ${JAVA_CONFIG}
if ! [ $? -eq 0 ] ; then
  echo "deployment.system.config=file://${JAVA_PROPERTIES}" &gt;&gt; ${JAVA_CONFIG}
fi
</fix>
        <fix xmlns:xhtml="http://www.w3.org/1999/xhtml" id="java_jre_deployment_config_properties" system="urn:xccdf:fix:script:ansible" complexity="low" disruption="low" strategy="configure">- name: Ensure Java Deployment Directory Exists
  file:
    path: /etc/.java/deployment
    state: directory
    mode: '0755'
  tags:
    - DISA-STIG-JRE8-UX-000020
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - java_jre_deployment_config_properties
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed

- name: Configure the Path to the deployment.properties File
  lineinfile:
    create: true
    mode: '0644'
    dest: /etc/.java/deployment/deployment.config
    regexp: ^\s*#?\s*deployment.system.config=.*
    line: deployment.system.config=file:///etc/.java/deployment/deployment.properties
  tags:
    - DISA-STIG-JRE8-UX-000020
    - NIST-800-53-CM-6(b)
    - configure_strategy
    - java_jre_deployment_config_properties
    - low_complexity
    - low_disruption
    - medium_severity
    - no_reboot_needed
</fix>
        <check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
          <check-content-ref name="oval:ssg-java_jre_deployment_config_properties:def:1" href="ssg-jre-oval.xml"/>
        </check>
        <check system="http://scap.nist.gov/schema/ocil/2">
          <check-content-ref name="ocil:ssg-java_jre_deployment_config_properties_ocil:questionnaire:1" href="ssg-jre-ocil.xml"/>
        </check>
      </Rule>
    </Group>
  </Group>
</Benchmark>
